program test;
uses
 rtl_base,rtl_fpccompatibility;
type
 ppointer = ^pointer;
 TComponent = class;

 Ocomponentlist = object [nozeroinit]
  method add(const acomponent: Tcomponent);
//  method remove(const acomponent: Tcomponent);
  private
   fcount: int32;
   fcapacity: int32;
   fdata: ppointer;
   method ini() [ini];
//   method fini() [fini];
//   method grow();
 end;
 
 Ccomponents = class(Cbase)
  private
   fcomponents: Ocomponentlist;
 end;
 
 Tcomponent = class(Tobject)
  constructor create(aowner: Tcomponent) [virtual];
  destructor destroy() [override];
  method insertcomponent(acomponent: tcomponent);
//  method removecomponent(acomponent: tcomponent);
//  property name: string8 read fname write setname;
//  property owner: Tcomponent read fowner write setowner;
//  method componentcount(): int32;
  private
   fowner: Tcomponent;
   fcomponents: Ccomponents;
   fname: string8;
//   method setname(const avalue: string8);
//   method setowner(const avalue: Tcomponent);
 end;
 pcomponent = ^Tcomponent;

{ Ocomponentlist }

method Ocomponentlist.ini();
begin
 fcount:= 0;
 fcapacity:= 0;
 fdata:= nil;
writeln('1 ',self);
fcount:= 123;
end;
{
method Ocomponentlist.fini();
begin
 if fdata <> nil then
  freemem(fdata);
 end;
end;

method Ocomponentlist.grow();
begin
 fcapacity:= fcount*2+16;
writeln('3 ',self,' ',fcount,' ',fcapacity);
 reallocmem(fdata,fcapacity*sizeof(pointer));
end;

method Ocomponentlist.remove(const acomponent: Tcomponent);
var
 p1,pe: pcomponent;
begin
 p1:= pointer(fdata);
 pe:= p1 + fcount;
 while p1 < pe do
  if p1^ = acomponent then
   dec(fcount);
   dec(pe);
   while p1 < pe do
    p1^:= (p1+1)^
    inc(p1);
   end;
   break;
  end;
  inc(p1);
 end;
end;
}
{ Tcomponent }

constructor Tcomponent.create(aowner: Tcomponent);
begin
{
 if aowner <> nil then
  aowner.insertcomponent(self);
 end;
}
end;

destructor Tcomponent.destroy();
begin
{
 fcomponents.free();
 inherited;
}
end;
{
method Tcomponent.removecomponent(acomponent: tcomponent);
begin
 if acomponent.fowner = self then
  acomponent.fowner:= nil;
  fcomponents.fcomponents.remove(acomponent);
 end;
end;


method Tcomponent.componentcount(): int32;
begin
 result:= 0;
 if fcomponents <> nil then
  result:= fcomponents.fcomponents.fcount;
 end;
end;

method Tcomponent.setname(const avalue: string8);
begin
 fname:= avalue;
end;

method Tcomponent.setowner(const avalue: Tcomponent);
begin
 fowner:= avalue;
end;
}

method Ocomponentlist.add(const acomponent: Tcomponent);
begin

writeln('4 ',self,' ',fcount,' ',fcapacity);
{
 if fcount >= fcapacity then
  grow();
 end;
 fdata[fcount]:= acomponent;
 inc(fcount);
}
end;

method Tcomponent.insertcomponent(acomponent: tcomponent);
begin
{
 if (acomponent.fowner <> self) then
  if fcomponents = nil then
   fcomponents:= Ccomponents.create();
writeln('2 ',self,' ',fcomponents);
  end;
}
  fcomponents:= Ccomponents.create();
//writeln('0 ',fcomponents,' ',@fcomponents.fcomponents);
{$internaldebug on}
  fcomponents.fcomponents.add(acomponent);
//  acomponent.fowner:= self;
// end;  
end;


type

var
 c1,c2: Tcomponent;

begin
 c1:= Tcomponent.create(nil);
 c2:= Tcomponent.create(nil);
 c1.insertcomponent(c2);
 c1.destroy();
 c2.destroy();
end.