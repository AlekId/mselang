//grammar for mselang compiler, pascal mode
//todo: use optimised handler for whitespace, reserved words and the like
@whitespace
 ' ',#$0d,#$0a
{whitespace}
"@whitespace,-
 '{$',directive-^*
 '{',curlycomment0-^*
 '(*',bracecomment0-^*
 '//',linecomment0-^*"
{comments}
"@whitespace,-
 '{',curlycomment0-^*
 '(*',bracecomment0-^*
 '//',linecomment0-^*"

{blockswitch}
" 'implementation'.,*
 'type'.,*
 'const'.,*
 'var'.,*
 'label'.,*
 'begin'.,*
 'procedure'.,*
 'function'.,*
 'sub'.,*
 'class'.,*
 'method'.,*
 'constructor'.,*
 'destructor'.,*
 'end'.,*
 'initialization'.,*
 'finalization'.,*
"
{blockends}
" 'end'.,blockend
 'else'.,blockend
 'initialization'.,blockend
 'finalization'.,blockend
 'finally'.,blockend
 'except'.,blockend
"
@keywordstart
 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p'
 'q','r','s','t','u','v','w','x','y','z'
 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P'
 'Q','R','S','T','U','V','W','X','Y','Z'
@identstart
 '_',@keywordstart
@binnum
 '0','1'
@octnum
 @binnum,'2','3','4','5','6','7'
@decnum
 @octnum,'8','9'
@hexnum
 @decnum,'a','b','c','d','e','f','A','B','C','D','E','F'
@.handlerunits
 'handler','unithandler','classhandler','typehandler','subhandler'
 'varhandler','exceptionhandler','controlhandler','handlerutils'
 'valuehandler','interfacehandler','directivehandler'
@.internaltokens
 '.rootele','.void','.classes','.private','.protected','.public','.published'
 '.classintfname','.classintftype','.classimp','.objpotyp','.classoftyp'
 '.self'
 '.units','.ancestors','.nestedvarref','.defines'
 '.ini','.inizeroed','.fini','.incref','.decref','.decrefindi','.destroy'
 '.method','.operators','.operatorsright','.system'
@.tokens
 'mselang','pascal','system'
 'nil','result','exitcode','sizeof','defined','break','continue','self'
 'b','booleval','internaldebug'
 'nozeroinit','zeroinit','virtual','except','end'
 'new','dispose','afterconstruct','beforedestruct'
 'ini','fini','incref','decref'
 'operator','operatorright'
 'default'
start,nounit,,
 ${whitespace}
 'unit'.,unit0-
 'program'.,program0-
nounit,,,handlenouniterror
program0,unit0,handleprogramentry,
unit0,nounitname,,
 ${whitespace}
 @identstart,ident^*,unit1
nounitname,,handlenounitnameerror,
unit1,unit2,,setunitname*
unit2,semicolonexpected,,
 ${whitespace}
 ';',unit3-
unit3,implementation,,handleafterintfuses
 ${whitespace}
 'interface'.,start1-
 'implementation'.,implementation- // "interface" facultative
checksemicolon,,,^
 ${whitespace}
 ';',-*
 '',semicolonexpected
checksemicolon1,,,^*>
 ${whitespace}
 ';',-*
 '',semicolonexpected
checksemicolon1a,,,^*
 ${whitespace}
 ';',-*
 '',semicolonexpected
checksemicolon2,,,*>
 ${whitespace}
 ';',-*
 '',semicolonexpected
checksemicolon2a,,,*
 ${whitespace}
 ';',-*
 '',semicolonexpected
semicolonexpected,,,handlesemicolonexpected
colonexpected,,,handlecolonexpected
identexpected,,,handleidentexpected
start1,start2,,
 ${whitespace}
 'uses'.,uses0-*,start2a
uses0,uses1,,
 '',commaidents^*
uses1,useserror,,
 ';',usesok-
useserror,,,handleuseserror
usesok,,,handleuses
start2a,start2,,
start2,noimplementation,handleafterintfuses,
 ${whitespace}
 'implementation'.,implementation-
 'type'.,type-*
 'const'.,const-*
 'var'.,var-*
 'label'.,labeldef-*
 'class'.,start2class-
{$grapas}
 'procedure'.,subprocedureheader-*^>
 'function'.,subfunctionheader-*^>
{$}
{$gramse}
 'method'.,submethodheader-*^>
 'sub'.,subsubheader-*^>
 'procedure'.,subsubheader-*^>
{$}
start2class,start2,,
 ${whitespace}
 'procedure'.,subclassprocedureheader-*^
 'function'.,subclassfunctionheader-*^
 'method'.,subclassmethodheader-*^
noimplementation,implementation,handlenoimplementationerror,

implementation,implementation1,handleimplementationentry,
 '',main*
implementation1,,,handleendexpected*
 ${whitespace}
 'end'.,implementationend-
 'initialization'.,initialization-
 'finalization'.,finalization-
initialization,initialization1,handleinitializationstart,
 '',statementblock-^*
initialization1,,handleinitialization,handleendexpected
 ${whitespace}
 'finalization'.,finalization-
 'end'.,implementationend-
finalization,finalization1,handlefinalizationstart,
 '',statementblock-^*
finalization1,,handlefinalization,handleendexpected
 'end'.,implementationend-
implementationend,implementationend1,,handleimplementation*
implementationend1,,,
 ${whitespace}
 '.',-*
 '',!handledotexpected*
//implementationend2,,handledotexpected,

main,main1,,handleafterimpluses
 ${whitespace}
 'uses'.,impluses-
impluses,main1,handleimplusesentry,handleafterimpluses
//terminate interface parsing
 '',uses0-*
main1,,,handlemain
 ${whitespace}
 'type'.,type-*>
 'const'.,const-*>
 'var'.,var-*>
 'label'.,labeldef-*>
 'class'.,main1class-
{$grapas}
 'procedure'.,procedure-^*>
 'function'.,function-^*>
{$}
{$gramse}
 'method'.,method-^*>
 'procedure'.,subsub-^*>
 'sub'.,subsub-^*>
{$}
 'constructor'.,constructor-^*>
 'destructor'.,destructor-^*>
 'begin'.,progbegin-
main1class,main1,,
 ${whitespace}
 'procedure'.,classprocedure-^*
 'function'.,classfunction-^*
 'method'.,classclamethod-^*
curlycomment0,,,handlecommentend^>
 '}',-*
 '',-
bracecomment0,,,handlecommentend^>
 '*)',-*
 '',-
directive,directive1,handledirectiveentry,*
 'mode'.,mode-*
 'dumpelements'.,dumpelements-*
 'dumpopcode'.,dumpopcode-*
 'abort'.,abort-*
 'stoponerror'.,stoponerror-*
 'nop'.,nop-*
 'include'.,include-*
 'define'.,define-*
 'undef'.,undef-*
 'ifdef'.,ifdef-*
 'ifndef'.,ifndef-*
 'if'.,ifcond-*
 'else'.,elseif-*
 'endif'.,endif-*
 'ifend'.,endif-*
 'h'.,ignoreddirective*
 'mode'.,ignoreddirective*
 'inline'.,ignoreddirective*
 '',compilerswitch*
 '}',-*
 '',-
directive1,,,*
 '}',-*
 '',-
ignoreddirective,directiveend,,handleignoreddirective
 '',getident^*

include,include1,,
 @whitespace,-
 '''',string-*
 '',token*
include1,,,handleinclude*>
 '}',-*
 '',-
 
dumpelements,directiveend,handledumpelements,
dumpopcode,directiveend,handledumpopcode,
nop,directiveend,handlenop,
abort,directiveend,handleabort,
stoponerror,directiveend,handlestoponerror,

mode,directiveend,,handlemode
 '',getident^*
define,define1,,
 '',getident^*
define1,directiveend,,handledefine
 ${whitespace}
 '=',define2-
define2,directiveend,,handledefinevalue
 '',exp^*
 
undef,directiveend,,handleundef
 '',getident^*

ifdef,skipif,,
 '',getident^*,ifdef1
ifdef1,directiveend,,handleifdef

ifndef,skipif,,
 '',getident^*,ifndef1
ifndef1,directiveend,,handleifndef
 
ifcond,skipif,ifcondentry,
 '',exp^*,ifcond1
ifcond1,directiveend,,handleifcond*

skipif,directiveend,,
 '}',skipif0-
 '',-
skipif0,,,
 ${comments}
 '{$',skipif1->
 '',-
skipif1,,,
 'else'.,skipifelse-
 'endif'.,directiveend-
 'ifend'.,directiveend-
 '}',skipif0-
 '',-
skipifelse,directiveend,handleskipifelseentry,

elseif,skipelse,,handleelseif

skipelse,directiveend,,
 '}',skipelse0-
 '',-
skipelse0,,,
 '{$',skipelse1->
 '',-
skipelse1,,,
 'endif'.,directiveend-
 'ifend'.,directiveend-
 
endif,directiveend,handleendif,

compilerswitch,compilerswitch1,handlecompilerswitchentry,
 '',getident^*
compilerswitch1,directiveend,,handlecompilerswitch
 '+',!setcompilerswitch-*
 '-',!unsetcompilerswitch-*
 '',compilerswitch2
compilerswitch2,directiveend,handlelongcompilerswitchentry,handlecompilerswitch
 ${whitespace}
 '+',!setlongcompilerswitch-*
 'on'.,!setlongcompilerswitch-*
 '-',!unsetlongcompilerswitch-*
 'off'.,!unsetlongcompilerswitch-*
 'default'.,!setdefaultcompilerswitch-*

directiveend,,handledirective,^>
 '}',-*
 '',-
linecomment0,,,*
 #$0a,linecomment1-
 '',-
linecomment1,,,handlecommentend^>
progbegin,progblock,handleprogbegin,
progblock,,,handleprogblock*
 '',statementblock-^*

paramsdef0,paramsdef0a,handleparamsdefentry,
 ${whitespace}
 '(',paramsdef1-
paramsdef0a,,,handleparamsdef^
paramsdef1,paramsdef2,,
 ${whitespace}
 ')',paramsdef3-
 '',paramdef0^*
paramsdef2,,,
 ${whitespace}
 ';',paramsdef1-
 ')',paramsdef3-
paramsdef3,,,handleparamsdef^
paramdef0,paramdef1,handleparamdef0entry,
 ${whitespace}
 'const'.,!setconstparam->
 'constref'.,!setconstrefparam->
 'var'.,!setvarparam->
 'out'.,!setoutparam->
 @identstart,commaidents^*
// @identstart,ident^*
paramdef1,,,
 ${whitespace}
 ':',paramdef2-
 '',untypedparam*
untypedparam,,,handleuntypedparam^
paramdef2,paramdef3,,
 '',getfieldtype^*
paramdef3,,,handleparamdef3^
 ${whitespace}
 '=',paramdef4-
paramdef4,,,handleparamdefault^
 '',exp^*

subclassfunctionheader,subheader,handleclassfunctionentry,
subclassprocedureheader,subheader,handleclassprocedureentry,
subclassmethodheader,subheader,handleclassmethodentry,
subfunctionheader,subheader,handlefunctionentry,
subprocedureheader,subheader,handleprocedureentry,
submethodheader,subheader,handlemethodentry,
subsubheader,subheader,handlesubentry,

classmethmethodheader,clasubheader,handleclassmethmethodentry,
classmethfunctionheader,clasubheader,handleclassmethfunctionentry,
classmethprocedureheader,clasubheader,handleclassmethprocedureentry,
methmethodheader,clasubheader,handlemethmethodentry,
methfunctionheader,clasubheader,handlemethfunctionentry,
methprocedureheader,clasubheader,handlemethprocedureentry,
methconstructorheader,clasubheader,handlemethconstructorentry,
methdestructorheader,clasubheader,handlemethdestructorentry,
proceduretypedef,subtypedef,handleproceduretypedefentry,
functiontypedef,subtypedef,handlefunctiontypedefentry,
subsubtypedef,subtypedef,handlesubtypedefentry,
methodtypedef,subtypedef,handlemethodtypedefentry,

clasubheader,,handleclasubheaderentry,*
 '',callclasubheader*
callclasubheader,suba,callsubheaderentry,
//suba can be canceled by dec(stackindex)
 '',clasubheader0*

clasubheader0,clasubheader1,,
 ${whitespace}
 @identstart,identpath^*
clasubheader1,clasubheader2,handlesub1entry,
 '',paramsdef0^*
clasubheader2,clasubheader3,,
 ${whitespace}
 ':',functiontype-^*
clasubheader3,,,
 ${whitespace}
 '[',clasubheaderattach-*>
 'virtual'.,!handlevirtual-
 'override'.,!handleoverride-
 'overload'.,!handleoverload-
 ';',clasubheader4-
 '',semicolonexpected
clasubheader4,,,*
 ${whitespace}
 'virtual'.,virtual-
 'override'.,override-
 'overload'.,overload-
 '',!handlesubheader*
virtual,clasubheader3,handlevirtual,
override,clasubheader3,handleoverride,
overload,clasubheader3,handleoverload, 
clasubheaderattach,,,handleclasubheaderattach*
 '',attach^*

subtypedef,,,*               //no semicoloncheck
 '',subtypedef0*
subtypedef0,subheader1,handlesubtypedef0entry, //push dummy ident

subheader,subheadera,,*
// '',subheader0*
 '',callsubheader*
subheadera,,,*
 ${whitespace}
 ';',-*
 '',semicolonexpected

classfunction,sub,handleclassfunctionentry,
classprocedure,sub,handleclassprocedureentry,
classclamethod,sub,handleclassmethodentry,
function,sub,handlefunctionentry,
procedure,sub,handleprocedureentry,
method,sub,handlemethodentry,
subsub,sub,handlesubentry,
constructor,sub,handleconstructorentry,
destructor,sub,handledestructorentry,

//sub,suba,,
// '',subheader0*
sub,sub1,,
 '',callsubheader*
sub1,,,*
 ${whitespace}
 ';',-*
 '',semicolonexpected
 
callsubheader,suba,callsubheaderentry, 
//suba can be canceled by dec(stackindex)
 '',subheader0*

suba,suba1,,
 ${whitespace}
 ';',-*
 '',semicolonexpected
suba1,,,
 '',subbody4*

subheader0,subheader1,,
 ${whitespace}
 @identstart,identpath^*
subheader1,subheader2,handlesub1entry,
 '',paramsdef0^*
subheader2,subheader2a,,
 ${whitespace}
 ':',functiontype-^*
subheader2a,subheader3,,
 'of'.,subof-
subof,,subofentry,handleofobjectexpected*
 ${whitespace}
 'object'.,subheader3-
subheader3,,,
 ${whitespace}
 'external'.,external0-
 'forward'.,!handleforward-
 ';',subheader4-+
subheader4,,,handlesubheader*+
 ${whitespace}
 'external'.,external0-
 'forward'.,forward-
external0,external1,handleexternal0entry,handleexternal0
 ${whitespace}
 ';',subheader3
 'name'.,external2-
 '',exp^*
external1,subheader3,,
 ${whitespace}
 'name'.,external2-
external2,subheader3,,handleexternal2
 '',exp^*
 
external,subheader3,handleexternal, 
forward,subheader3,handleforward, 

functiontype,,,
 '',resultident*
resultident,,checkfunctiontype,
 '',getfieldtype*

functiontypea,,, //same layout as parameter
 ${whitespace}
 @identstart,ident^*

subbody4,,,handlebeginexpected*
 ${whitespace}
 'type'.,type-*>
 'const'.,const-*>
 'var'.,var-*>
 'label'.,labeldef-*>
 'procedure'.,procedure-^*>
 'function'.,function-^*>
 'sub'.,subsub-^*>
 'begin'.,subbody5a-
subbody5a,subbody5,handlesubbody5a, //set procstartaddress
subbody5,subbody5b,,
 '',statementblock^*
subbody5b,,,handleendexpected*
 'end'.,subbody6-
subbody6,checkterminatorpop,handlesubbody6, //return, release

checkterminator,,,handlecheckterminator
 ';',terminatorok-
 ${whitespace}
terminatorok,,,*
checkterminatorpop,,,handlecheckterminator
 ';',terminatorokpop-
 ${whitespace}
terminatorokpop,,,^*

compoundstatement,checkend,,*
 '',statementblock-^*
//
// exception
//
{$grapas}
try,try1,handletryentry,
 '',statementblock^*
try1,,,handlefinallyexpected*
 'finally'.,finally-
 'except'.,except-
finally,finally1,handlefinallyentry,
 '',statementblock^*
finally1,,handlefinally,*
 '',checkend*
except,except1,handleexceptentry,
 '',statementblock^*
except1,,handleexcept,*
 '',checkend*
{$}

{$gramse}
try,try1,handletryentry,
 '',statementblock^*
try1,,,handlefinallyexpected*
 'finally'.,finally-
 'except'.,except-
finally,finally1,handlefinallyentry,
 '',statementblock^*
finally1,,handlefinally,*
 '',checkend*
except,except1,handleexceptentry,
 '',statementgroup^*
except1,except2,,
 ${whitespace}
 'else'.,except3-
except2,,handleexcept,*
 '',checkend*
except3,except2,handleexceptelse,
 '',statementgroup^*
{$}

raise,,,handleraise*
 '',exp^*
 
goto,,,handlegoto*
 '',getident^*

checkend,,,*
 ${whitespace}
 'end'.,-*
 '',!handleendexpected*

with,with1,,handlewithentry
with1,with2,,
 '',addressfact*
with2,,handlewith2entry,handledoexpected*
 ${whitespace}
 ',',with1-
 'do'.,with3-
{$grapas}
with3,,,handlewith3*
 '',statement*
{$}
{$gramse}
with3,with3a,,
 '',statementgroup^*
with3a,,,handleendexpected*
 'end'.,with3b-
with3b,,,handlewith3*
{$}

endcontext,,,
blockend,,,^*

simplestatement,,,*
 '',statement0*
statement0,statement1,handlestatement0entry,
 '',exp^*
statement1,,,handlestatementexit
 ${whitespace}
 ':=',assignment-
{$grapas}
 ':',label-
{$}
{$gramse}
 ':',labelcase-
 ',',checkcaselabel
 '..',checkcaselabel
labelcase,label,,handlecheckcaselabel
//labelcase,,handlecheckcaselabel,
// ':',label-
checkcaselabel,checkcaselabel1,,handlecheckcaselabel
checkcaselabel1,,,handlestatementexit
exceptlabel,,,handleexceptlabel*> //switched to in handlecheckcaselabel
 ${whitespace}
 ',',exceptlabel1-
exceptlabel1,statement0,,handleexceptlabel1*
{$}
assignment,,handleassignmententry,handleassignment
 '',exp^*
label,,,handlelabel*>

//dummy,,,

statement,,,*
 ${whitespace}
 ';',endcontext-
 'begin'.,compoundstatement-
 ${blockends}
 'with'.,with-
 'if'.,if0-
 'case'.,case-
 'while'.,while-
 'repeat'.,repeat-
 'for'.,for-
 'try'.,try-*
 'raise'.,raise-
 'goto'.,goto-
 '',simplestatement

statementblock,statementblock1,,*
 '',statement^*
statementblock1,,,handlestatementblock1*
 ${whitespace}
 ';',statementblock-
 ${blockends}

statementstack,,,^
 '',statement*

//
// control todo: better names instead of *n
//          
if0,then,handleif0,
 '',exp^*
then,,,handlethen
 ${whitespace}
 'then'.,then0-

{$grapas}
then0,then2,handlethen0,
 '',statementstack^*
then2,,,handlethen2
 ${whitespace}
 'else'.,else0-
else0,else,handleelse0,
else,,,handleelse
 '',statementstack^*
{$}

statementgroup,,,^
 ${whitespace}
 '',statement^*>
 'end'.,*
 'else'.,*
 ';',-
 
{$gramse}
then0,then2,handlethen0,
 '',statementgroup^*
then2,,,handleendexpected
 ${whitespace}
 'end'.,then2a-
 'else'.,else-
then2a,,,handlethen2
else,else1,handleelse0,
 '',statementgroup^*
else1,,,handleendexpected
 ${whitespace}
 'end'.,else1a-
else1a,,,handleelse
{$}


while,whiledo,handlewhilestart,
 '',exp^*
whiledo,,,handledoexpected
 ${whitespace}
 'do'.,whiledo0-
{$grapas}
whiledo0,,handlewhileexpression,handlewhileend
 '',statementstack^*
{$}
{$gramse}
whiledo0,whiledo0a,handlewhileexpression,
 '',statementgroup^*
whiledo0a,,,handleendexpected
 'end'.,whiledo0b-
whiledo0b,,,handlewhileend
{$}

repeat,,handlerepeatstart,handleuntilexpected
 ${whitespace}
 'until'.,repeatuntil0-
 '',statement*>
repeatuntil0,,handleuntilentry,handlerepeatend*
 '',exp^*

for,forvar,,
 '',exp^*
forvar,,handleforvar,handleassignmentexpected
 ':=',forstart-
forstart,forto,,handleforstart
 '',exp^*
forto,,,handletoexpected
 'to'.,forstop-
 'downto'.,downto-
downto,forstop,,handledownto
forstop,fordo,,
 '',exp^*
fordo,,,handledoexpected
 'do'.,forbody-
{$grapas}
forbody,,handleforheader,handleforend*
 '',statementstack^*
{$}
{$gramse}
forbody,forbodya,handleforheader,
 '',statementgroup^*
forbodya,,,handleendexpected
 'end'.,forbodyb-
forbodyb,,,handleforend*
{$}

casestatementgroup,,handlecasestatementgroupstart,^
 '',statement^*>
 'end'.,*
 'else'.,*
 ';',->

case,caseof,handlecasestart,
 '',exp^*
caseof,,handlecaseexpression,handlecase*
 'of'.,casebranch-^*
 '',!handleofexpected*
casebranch,casebranch1,handlecasebranch1entry,
 ${whitespace}
 'else'.,caseelse-*
 'end'.,caseend-
 '',commasepexp^*
casebranch1,,,handlecolonexpected
 ${whitespace}
 ':',casebranch2-*
{$grapas}
casebranch2,casebranch3,handlecasebranchentry,*
 '',statementstack^*
{$}
{$gramse}
casebranch2,casebranch3,handlecasebranchentry,*
 '',casestatementgroup^*
//casebranch2a,casebranch2,handlecasebranch2entry,
// 'else'.,caseelse-*
// 'end'.,caseend-
casebranchrestart,casebranch3,,
{$}
casebranch3,casebranch,handlecasebranch,
 ${whitespace}
 ';',casebranch-
// 'else'.,caseelse-*
// 'end'.,caseend-
caseelse,checkcaseend,,
 'end'.,caseend-
 '',statementblock^*
checkcaseend,caseend,,
 ${whitespace}
 ';',-
 '',checkend*
caseend,,,^

commasepexp,commasepexp1,,
 '',exp^*
commasepexp1,,,^
 ',',commasepexp-
 '..',commasepexp2-
commasepexp2,commasepexp3,,
 '',exp^*
commasepexp3,,handlecommaseprange,^
 ',',commasepexp-

simpletype,rangetype,,+
 @identstart,typeident*
typeident,checktypeident,,
 '',identpath^*
checktypeident,,,handlechecktypeident //pops parent
rangetype,,,handlecheckrangetype*^
 '',getrange^*

setdef,,,handleofexpected
 ${whitespace}
 'of'.,setdef1-
setdef1,,,handlesettype*^
 '',getfieldtype^*

recorddef,recorddef1,handlerecorddefstart,
recorddef1,recorddeferror,,
 ${whitespace}
 @identstart,recordfield^*
 'case'.,recordcase-*>
 '(',recordca6a-*>
 'end'.,recorddefreturn-
recorddeferror,,,handlerecorddeferror^
recordfield,,,handlerecordfield^*>
 '',fielddef^*                          
recorddefreturn,,handlerecordtype,*^

recordcase,recordcase1,handlerecordcasestart,  //set ck_recordcase
 '',getidentpath^*
recordcase1,recordcase3,,handlerecordcase1*
 ${whitespace}
 ':',recordcase2-
recordcase2,recordcase3,,handlerecordcasetype*
 '',getfieldtype^*
recordcase3,recorddef,,handlecaseofexpected*
 ${whitespace}
 'of'.,recordcase4-
//recordcase4a,recordcase4,handlerecordcasestart, //set ck_recordcase
recordcase4,recordcase5,,handlerecordcase4*
 ${whitespace}
 'end'.,recordcaseend
 ')',recordcaseend
 '',commasepexp^*
recordcase5,,,handlerecordcase5*
 ${whitespace}
 ':',recordcase6-
recordcase6,,,handlerecordcase6*
 ${whitespace}
 '(',recordcase7-
recordcase7,,handlerecordcaseitementry,handlerecordcase7* //")" expected
 ${whitespace}
 @identstart,recordfield^*
 'case'.,recordcase-*>
 ')',recordcase8-
recordcase8,recordcase4,handlerecordcaseitem,
 ${whitespace}
 ';',recordcase4-
recordcaseend,,,handlerecordcase*

recordca6a,recordca7,handlerecordcasestart, //without "case"
recordca7,,handlerecordcaseitementry,handlerecordcase7* //")" expected
 ${whitespace}
 @identstart,recordfield^*
 ')',recordca8-
 '(',recordca6a-*>
recordca8,,handlerecordcaseitem,handlesemicolonexpected
 ${whitespace}
 ';',recordca9-
 ')',recordcaend
 'end'.,recordcaend
recordca9,recordcaend,,
 ${whitespace}
 '(',recordca7-
recordcaend,,,handlerecordcase

arraydef,arraydef1,,
 'of'.,arraydef2-
 ${whitespace}
 '',arrayindex*
arraydef1,,,handlearraydeferror1
 ${whitespace}
 'of'.,arraydef2-
arraydef2,,,handlearraytype
 '',getfieldtype^*

enumdef,enumdef1,handleenumdefentry,
 '',getenumitem^*
enumdef1,,,handlecloseroundbracketexpected^*
 ')',enumdef3-
  ',',enumdef2-
enumdef2,enumdef1,,
 '',getenumitem^*
enumdef3,,,handleenumdef^*

getenumitem,getenumitem1,,
 '',getident^*
getenumitem1,,,handleenumitem^
 ${whitespace}
 '=',getenumitem2-
getenumitem2,,,handleenumitemvalue^
 '',exp^*
arrayindex,,,handlearrayindexerror1
 '[',arrayindex1-
arrayindex1,arrayindex2,,
 '',getfieldtype^*
arrayindex2,,,
 ',',getfieldtype-^*>
 ']',arrayindex3-
  '',!handlearrayindexerror2*
arrayindex3,,,
 ${whitespace}
 '[',arrayindex1-
getnamedtype,,,handlenamedtype*^
 '',getidentpath^*

trygetfieldtype,gettype,handletrygetfieldtypestart,
getfieldtype,gettype,handlegetfieldtypestart,
gettypetype,gettype,handlegettypetypestart,
gettype,,,*^
 ${whitespace}
 '^',!handlepointertype-
 '(',enumdef-^*
 'set'.,setdef-^*
 'packed'.,-       //todo
 'record'.,recorddef-^*
 'array'.,arraydef-^*
 'object'.,objectdef-^*
 'class'.,classdef-^*
 'interface'.,interfacedef-^*
 'procedure'.,proceduretypedef-^*
 'function'.,functiontypedef-^*
 'sub'.,subtypedef-^*
 'method'.,methodtypedef-^*
 '',simpletype^*
typedefreturn,,,*>
//
// defs
//
type,,,handletype>
 ${whitespace}
 ${blockswitch}
 '',type0*^
type0,type1,,
 @identstart,identpath^*
type1,,,handleequalityexpected
 ${whitespace}
 '=',type2-
type2,type3,,*
 '',gettypetype^*
type3,,,*>
 ${whitespace}
 ';',-*
 '',semicolonexpected

labeldef,identexpected,,
 ${whitespace}
 ${blockswitch}
 '',labeldef0
labeldef0,labeldef1,,
 @identstart,commaidents^*
 '',identexpected
labeldef1,,handlelabeldef,*
 ${whitespace}
 ';',-*
 '',semicolonexpected

const,,,*>
 ${whitespace}
 ${blockswitch}
 '',const0^*
const0,const1,,^
 ${whitespace}
 @identstart,ident^*
 '',!handleidentexpected
const1,,,handleequalityexpected^
 ${whitespace}
 '=',const2-
 ':',typedconst-
const2,const3,,
 '',exp^*
const3,,handleconst3,
 '',checksemicolon1
typedconst,typedconst1,,                     
 '',typedconst0^*
typedconst0,gettype,handlegetfieldtypestart,
typedconst1,,,handleequalityexpected
 ${whitespace}
 '=',typedconst2-
typedconst2,typedconst3,handletypedconst2entry,handletypedconst
//entryhandler switches context
 '',exp^*          //for simple types
typedconst3,,,
 '',checksemicolon1
typedconstarray,,,handleopenroundbracketexpected
 ${whitespace}
 '(',typedconstarray0-
typedconstarray0,typedconstarray0a,,
 '',typedconstarray1*
typedconstarray0a,,,handletypedconstarray*>
 '',checksemicolon2a*
typedconstarray1,typedconstarray1a,handletypedconstarraylevelentry,
typedconstarray1a,typedconstarray2,,handletypedconstarrayitem*
 ${whitespace}
 '(',typedconstarray1-*>,typedconstarray2
 '',exp^*
typedconstarray2,,,handletypedconstarraylevel*
 ${whitespace}
 ')',-*
 ',',typedconstarray1a-
 '',!handlecloseroundbracketexpected
 
var,,,*>
 ${whitespace}
 ${blockswitch}
 '',var0*^
var0,var1,,
 @identstart,commaidents^*
var1,,handlevardefstart,
 ${whitespace}
 ':',var2-
var2,var3,,
 '',getfieldtype^*
var3,checksemicolon2,,handlevar3
 ${whitespace}
 'external'.,extvar0-^*
extvar0,extvar1,handleextvar0entry,handleextvar0
 ${whitespace}
 ';',extvar0a
 'name'.,extvar2-
 '',exp^*
extvar0a,,,handledectop^
extvar1,,,handledectop^
 ${whitespace}
 'name'.,extvar2-
extvar2,,,handleextvar2^
 '',exp^*

fielddef,vardef0,,
 '',commaidents^*
vardef0,,handlevardefstart,
 ${whitespace}
 ':',vardef1-
vardef1,vardef2,,
 '',getfieldtype^*
vardef2,checksemicolon,,
 ${whitespace}
 'end'.,vardef3
 ')',vardef3
 ';',vardef3-
vardef3,,,^

getrange,getrange1,,
 '',exp^*
getrange1,,,handlerange1
 ${whitespace}
 '..',getrange3-
getrange3,,,handlerange3^
 '',exp^*
//
// class
//
objectdef,classdefa,handleobjectdefstart,
classdef,classdefa0,,
 ${whitespace}
 'of'.,classof-
classdefa0,classdefa,handleclassdefstart,
classdefa,classdef0,,
 ${whitespace}
 '(',classdefparam-*,classdef0a
 '[',classdefattach-*
 ';',classdefforward
classdefforward,,,handleclassdefforward
classof,,,handleclassoftyp*^
 '',trygetfieldtype^*
classdef0a,classdef0,,
 ${whitespace}
 '[',classdefattach-*
classdef0,classdef0b,,handleclassdef0
classdef0b,classdeferror,,
 ${whitespace}
 'private'.,!handleclassprivate-
 'protected'.,!handleclassprotected-
 'public'.,!handleclasspublic-
 'published'.,!handleclasspublished-
 'class'.,classmethod-
 'method'.,methmethodheader-*^>
 'procedure'.,methprocedureheader-*^>
 'function'.,methfunctionheader-*^>
 'constructor'.,methconstructorheader-*^>
 'destructor'.,methdestructorheader-*^>
 'property'.,classproperty-*^>
 @identstart,classfield^*>
 '(',recordca6a-*>
// '(',classvariant->
 'end'.,classdefreturn-
classmethod,classdef0b,,
 ${whitespace}
 'method'.,classmethmethodheader-*^
 'procedure'.,classmethprocedureheader-*^
 'function'.,classmethfunctionheader-*^
classdeferror,,handleclassdeferror,
classdefreturn,,handleclassdefreturn,*^
//classvariant,,handleclassvariantentry,handlecloseroundbracketexpected*
// ${whitespace}
// @identstart,classfield^*>
// ')',classvariant1-
//classvariant1,semicolonexpected,handleclassvariant,
// ${whitespace}
// ';',classdef0b-
// 'end'.,classdef0b

classdefparam,,,*
 ${whitespace}
 @identstart,classdefparam1*
 ')',-*
 '',!handlecloseroundbracketexpected
classdefparam1,classdefparam2,,
 '',identpath^*
classdefparam2,classdefparam2a,,handleclassdefparam2*
classdefparam2a,,,*
 ${whitespace}
 ',',classdefparam3-
 ')',-*
 '',!handlecloseroundbracketexpected
classdefparam3,classdefparam3a,,
 '',identpath^*           
classdefparam3a,classdefparam2a,,handleclassdefparam3a*
 
classdefattach,,,handleclassdefattach*
 '',attach^*

//comma separated items on stack
attachitems,attachitemsnoitemerror,handleattachitemsentry, 
 ${whitespace}
 @identstart,attachident
// '''',attachstring-
// '#',attachchar-
attachident,attachitems2,,
 '',ident0^*            //no reserved words
attachitems2,,,^
 ${whitespace}
 ',',attachitems-
 '=',attachitems3-
attachitems3,attachitems2a,,handleattachvalue
 '',stringvalue^*
// ${whitespace}
// '''',attachstring-
// '#',attachchar-
//attachstring,attachitems2a,,
// '',string*
//attachchar,attachitems2a,,
// '',char*
stringvalue,,,^
 ${whitespace}
 '''',string-*
 '#',char-*
 
attachitems2a,,,^
 ',',attachitems-
attachitemsnoitemerror,,,handlenoattachitemerror

attach,attach1,,
 '',attachitems^*
attach1,,,^
 ']',-*
 '',!handleclosesquarebracketexpected

//classfield,,,handleclassfield^*
classfield,,,handlerecordfield^*
 '',fielddef^*
//
// properties
//
propinddef1,propinddef2,, //index
 '',propind0^*
propinddef2,,,
 ${whitespace}
 ';',propinddef1-
 ']',propinddef3-
propinddef3,,,^      //return
propind0,propind1,handleparamdef0entry,
 ${whitespace}
 'const'.,!setconstparam->
 @identstart,commaidents^*
propind1,,,*
 ${whitespace}
 ':',propind2-
propind2,,,handleparamdef3^
 '',getfieldtype*
 
classproperty,classproperty1,classpropertyentry,
 '',getident^*
classproperty1,,,handlecolonexpected
 ${whitespace}
 ':',classproperty2-
 '[',classproperty2a-
classproperty2a,classproperty2b,,
 '',propinddef1-^*
classproperty2b,,,handlecolonexpected
 ${whitespace}
 ':',classproperty2-
 
classproperty2,classproperty3,,
 '',getnamedtype^*
classproperty3,classproperty4,,
 ${whitespace}
 'read'.,readprop-
 'write'.,writeprop-
 'default'.,defaultprop-
readprop,readpropa,,handlereadprop
 '',getidentpath^*
readpropa,classproperty4,,
 ${whitespace}
 'write'.,getidentpath-*,writeprop^
 'default'.,exp-^*,defaultprop^
writeprop,writepropa,,handlewriteprop
 '',getident^*
writepropa,classproperty4,,
 ${whitespace}
 'default'.,exp-^*,defaultprop^
defaultprop,classproperty4,,handledefaultprop*^
 '',exp^*
classproperty4,,,handleclassproperty
 ${whitespace}
 ';',-*
 '',!handlesemicolonexpected
//
// interface
//
interfacedef,interfacedef0,handleinterfacedefstart,
 ${whitespace}
 '(',interfacedefparam-^*
interfacedef0,interfacedeferror,,
 ${whitespace}
 'method'.,methmethodheader-*^>
 'procedure'.,methprocedureheader-*^>
 'function'.,methfunctionheader-*^>
 'end'.,interfacedefreturn-

interfacedeferror,,handleinterfacedeferror,^
interfacedefreturn,,handleinterfacedefreturn,^*

interfacedefparam,,,handleinterfaceparam^*
 ${whitespace}
 @identstart,interfaceparam1^*
 ')',-*
 '',!handlecloseroundbracketexpected
interfaceparam1,interfaceparam2,,
 '',identpath^*
interfaceparam2,,handleinterfaceparam2entry,^
 ${whitespace}
 ',',interfaceparam3-
 ')',-*
 '',!handlecloseroundbracketexpected
interfaceparam3,,,handleidentexpected*
 ${whitespace}
 @identstart,interfaceparam1*

statementend,,,handlestatementend!
//
// expression
//
{facts}
" '*',mulfact-*>
 'div'.,divfact-*>
 'mod'.,modfact-*>
 '/',divisionfact-*>
 'and'.,andfact-*>
 'shl'.,shlfact-*>
 'shr'.,shrfact-*>
"
{factswitch}
" ${whitespace}
 ${facts}
"
{terms}
" ${facts}
 '+',addterm-*>
 '-',subterm-*>
 'or'.,orterm-*>
 'xor'.,xorterm-*>
 '><',xorsetterm-*>
"
{termswitch}
" ${whitespace}
 ${terms}
"
{simpexps}
" ${terms}
 '=',eqsimpexp-*>
 '<>',nesimpexp-*> 
 '>',gtsimpexp-*>
 '<',ltsimpexp-*>
 '>=',gesimpexp-*> 
 '<=',lesimpexp-*>
 'in'.,insimpexp-*>
 'is'.,issimpexp-*>
"
{simpexpswitch}
" ${whitespace}
 ${simpexps}
"
exp,,,handleexp^
 '',callexp*
callexp,exp1,,
 '',fact*
exp1,,,handleexp1
${simpexpswitch} 

callexppop,exp1pop,,
 '',fact*
exp1pop,,,handleexp1^
${simpexpswitch} 

mulfact,,,handlemulfact
 '',fact*
divfact,,,handledivfact
 '',fact*
modfact,,,handlemodfact
 '',fact*
divisionfact,,,handledivisionfact
 '',fact*
andfact,,andopentry,handleandfact
 '',fact*
shlfact,,,handleshlfact
 '',fact*
shrfact,,,handleshrfact
 '',fact*

addterm,addterm1,,
 '',fact*
addterm1,,,handleaddterm
${factswitch}
subterm,subterm1,,
 '',fact*
subterm1,,,handlesubterm
${factswitch}
orterm,orterm1,oropentry,
 '',fact*
orterm1,,,handleorterm
${factswitch}
xorterm,xorterm1,oropentry,
 '',fact*
xorterm1,,,handlexorterm
${factswitch}
xorsetterm,xorsetterm1,,
 '',fact*
xorsetterm1,,,handlexorsetterm
${factswitch}

eqsimpexp,eqsimpexp1,,
 '',fact*
eqsimpexp1,,,handleeqsimpexp
${termswitch}
nesimpexp,nesimpexp1,,
 '',fact*
nesimpexp1,,,handlenesimpexp
${termswitch}
gtsimpexp,gtsimpexp1,,
 '',fact*
gtsimpexp1,,,handlegtsimpexp
${termswitch}
ltsimpexp,ltsimpexp1,,
 '',fact*
ltsimpexp1,,,handleltsimpexp
${termswitch}
gesimpexp,gesimpexp1,,
 '',fact*
gesimpexp1,,,handlegesimpexp
${termswitch}
lesimpexp,lesimpexp1,,
 '',fact*
lesimpexp1,,,handlelesimpexp
${termswitch}
insimpexp,insimpexp1,,
 '',fact*
insimpexp1,,,handleinsimpexp
${termswitch}
issimpexp,issimpexp1,,
 '',fact*
issimpexp1,,,handleissimpexp
${termswitch}

addressfact,fact0,handleaddressfactentry,
addressopfact,fact0,handleaddressopfactentry,
fact,fact0,handlefactentry,
fact0,fact1,,
 ${whitespace}
 '+',-
 '-',negfact-*
 'not'.,notfact-*
 '@',addressopfact-*
// '@',!handleaddressfact-
 '(',bracketstart-*
 '[',listfact-*
 @decnum,num*
 '%',binnum-*
 '&',octnum-*
 '$',hexnum-*
 '''',string-*
 '#',char-*
 'and'.,* //operators
 'shl'.,*
 'shr'.,*
 'or'.,*
 'xor'.,*
 'in'.,*
 'is'.,*
 'as'.,*
 @identstart,valueidentifier*
 '',illegalexpression

fact1,,fact1entry,handlefact1
 ${whitespace}
 '^',!handledereference-
 '[',getindex-^*>
 '..',*
 '.',fact2-
 '(',checkvalueparams3-

fact2,fact1,fact2entry,
 '',valueidentifierwhite*

negfact,,,handlenegfact
 '',fact*
notfact,,,handlenotfact
 '',fact*
listfact,listfact1,,       
 ${whitespace}
 ']',listfact3-     //empty list
listfact1,listfact2,,
 '',exp^*
listfact2,,,
 ${whitespace}
 ',',listfact1-
 ']',listfact3-
listfact3,,,handlelistfact

//addressfact,,handleaddressfactentry,handleaddressfact
// '',fact*

bracketstart,bracketend,,
 '',callexp*
bracketend,,,handlebracketend
 ${whitespace}

valueidentifier,checkvalueparams,,
 '',valuepath^*
valueidentifierwhite,checkvalueparams,,
 ${whitespace}
 '',valuepath^*

checkvalueparams,,,handlevalueidentifier
 ${whitespace}
 '(',checkvalueparams0-
checkvalueparams0,checkvalueparams1,,
 '',params0-^*
checkvalueparams1,,,handlevalueidentifier
 ${whitespace}
// '(',checkvalueparams2-
//checkvalueparams2,,handlefactcallentry,handlefactcall
// '',params0-^*
checkvalueparams3,,,handlefactcall
//no handlevalueident call
 '',params0-^*

checkparams,,,^
 ${whitespace}
 '(',params0-
params0,params1,handleparams0entry,
 ${whitespace}
 ')',paramsend-
params1,params2,,
 '',exp^*
params2,,,
 ${whitespace}
 ',',params1-
 ')',paramsend-
paramsend,,handleparamsend,^

getindex,getindex1,handleindexstart,
 '',exp^*
getindex1,,handleindexitem,handleindex
 ${whitespace}
 ']',-*
 ',',getindex2-
 '',!handleclosesquarebracketexpected
getindex2,getindex1,handleindexitemstart,
 '',exp^*

illegalexpression,,,handleillegalexpression*

// todo: use handler for number evaluation
num,,,handleint
 @decnum,-
 '.',checkfrac-+*
 'e','E',fracexp-*
fracexp,frac,,
 '',exponent*
checkfrac,,,*+
 @decnum,frac
frac,,,handlefrac
 @decnum,-
 'e','E',exponent-*
exponent,,,handleexponent
 '',number*
number,,handlenumberentry,
 '+',!posnumber-
 '-',!negnumber-
 @decnum,decnum
 '',numberexpected
decnum,,,handledecnum
 @decnum,-

binnum,,,handlebinnum
 @binnum,-
octnum,,,handleoctnum
 @octnum,-
hexnum,,,handlehexnum
 @hexnum,-
 
ordnum,,,
 @decnum,decnum
 '%',binnum-
 '&',octnum-
 '$',hexnum-
 '',numberexpected
string,,handlestringstart,
 '''',string1-
 #$0a,!stringlineenderror-*
 '',-
string1,,copystring,
 '''',apostrophe-
 '#',char-
apostrophe,,copyapostrophe,
 '''',string1-
 '',string
token,,handlestringstart,copytoken
 @whitespace,'}',*
 '',-

char,char1,handlestringstart,
 '',ordnum*
char1,string,handlechar,
 '''',string-
 '#',char-
 '',char2
char2,,,

ident,ident0,,
 'implementation'.,reservedword
 'type'.,reservedword
 'const'.,reservedword
 'var'.,reservedword
 'label'.,reservedword
 'begin'.,reservedword
 'class'.,reservedword
 'of'.,reservedword
 'method'.,reservedword
 'sub'.,reservedword
 'procedure'.,reservedword
 'function'.,reservedword
 'constructor'.,reservedword
 'destructor'.,reservedword
 'end'.,reservedword
 'else'.,reservedword
 'initialization'.,reservedword
 'finalization'.,reservedword
 'finally'.,reservedword
 'except'.,reservedword
reservedword,,,handlereservedword^
ident0,,handleidentstart,handleident^
 @identstart,@decnum,-

getident,,,^
 ${whitespace}
 @identstart,ident
 '',!handleidentexpected*

getidentpath,,,^
 ${whitespace}
 @identstart,identpath
 '',!handleidentexpected*

commaidents,commaidentsnoidenterror,, //comma separated idents on stack
 ${whitespace}
 @identstart,commaidents1
commaidents1,commaidents2,,
 '',ident^*
commaidents2,,,^
 ${whitespace}
 ',',commaidents-
commaidentsnoidenterror,,,handlenoidenterror

identpathcontinue,,,^>
 '',identpath^*
identpath,identpath1a,handleidentpathstart,
 @identstart,@decnum,-
identpath1a,identpath1,handleidentpath1a, //set ident
identpath1,,,^                            //finish
 ${whitespace}
 '..',*
 '.',identpath2a+-
identpath2a,identpath2,handleidentpath2a, //set continue flag
identpath2,,,handleidentpath2^            //error
 ${whitespace}
 @identstart,identpath*

valuepathcontinue,,,^>
 '',valuepath^*
valuepath,valuepath0,,
valuepath0,valuepath0a-,handlevaluepathstart,
 ${whitespace}
 'inherited'.,!handlevalueinherited-
valuepath0a,valuepath1a,,
 @identstart,@decnum,-
valuepath1a,valuepath1,handlevaluepath1a, //set ident
valuepath1,,,^                            //finish
 ${whitespace}
// '..',*
 '.',valuepath2a+-
valuepath2a,valuepath2,handlevaluepath2a, //set continue flag
valuepath2,,,handlevaluepath2^            //error
 ${whitespace}
 @identstart,valuepath*

numberexpected,,,handlenumberexpected*
