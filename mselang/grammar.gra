//grammar for mselang compiler, pascal mode
//todo: use optimised handler for whitespace, reserved words and the like
@whitespace
 ' ',#$0d,#$0a
{whitespace}
"@whitespace,-
 '{$',directive-^*
 '{',curlycomment0-^*
 '(*',bracecomment0-^*
 '//',linecomment0-^*"

{blockswitch}
" 'implementation'.,*
 'type'.,*
 'const'.,*
 'var'.,*
 'label'.,*
 'begin'.,*
 'procedure'.,*
 'function'.,*
 'constructor'.,*
 'destructor'.,*
"
{blockends}
" 'end'.,blockend
 'else'.,blockend
 'initialization'.,blockend
 'finalization'.,blockend
 'finally'.,blockend
 'except'.,blockend
"
@keywordstart
 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p'
 'q','r','s','t','u','v','w','x','y','z'
 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P'
 'Q','R','S','T','U','V','W','X','Y','Z'
@identstart
 '_',@keywordstart
@binnum
 '0','1'
@octnum
 @binnum,'2','3','4','5','6','7'
@decnum
 @octnum,'8','9'
@hexnum
 @decnum,'a','b','c','d','e','f','A','B','C','D','E','F'
@.handlerunits
 'handler','unithandler','classhandler','typehandler','subhandler'
 'varhandler','exceptionhandler','controlhandler','handlerutils'
 'valuehandler','interfacehandler','directivehandler'
@.internaltokens
 '.classes','.private','.protected','.public','.published'
 '.classintfname','.classintftype','.classimp','.self'
 '.units','.ancestors','.nestedvarref','.defines'
@.tokens
 'result','exitcode','sizeof','break','continue'
start,nounit,,
 ${whitespace}
 'unit'.,unit0-
 'program'.,program0-
nounit,,,handlenouniterror
program0,unit0,handleprogramentry,
unit0,nounitname,,
 ${whitespace}
 @identstart,ident^*,unit1
nounitname,,handlenounitnameerror,
unit1,unit2,,setunitname*
unit2,semicolonexpected,,
 ${whitespace}
 ';',unit3-
unit3,implementation,,handleafterintfuses
 ${whitespace}
 'interface'.,start1-
 'implementation'.,implementation- // "interface" facultative
checksemicolon,,,^
 ${whitespace}
 ';',-*
 '',semicolonexpected
checksemicolon1,,,^*>
 ${whitespace}
 ';',-*
 '',semicolonexpected
checksemicolon2,,,*>
 ${whitespace}
 ';',-*
 '',semicolonexpected
semicolonexpected,,,handlesemicolonexpected
identexpected,,,handleidentexpected
start1,start2,,
 ${whitespace}
 'uses'.,uses0-*,start2a
uses0,uses1,,
 '',commaidents^*
uses1,useserror,,
 ';',usesok-
useserror,,,handleuseserror
usesok,,,handleuses
start2a,start2,,
start2,noimplementation,handleafterintfuses,
 ${whitespace}
 'implementation'.,implementation-
 'type'.,type-*
 'const'.,const-*
 'var'.,var-*
 'label'.,label-*
 'procedure'.,subprocedureheader-*^>
 'function'.,subfunctionheader-*^>

noimplementation,implementation,handlenoimplementationerror,

implementation,implementation1,handleimplementationentry,
 '',main*
implementation1,,,handleendexpected*
 ${whitespace}
 'end'.,implementationend-
 'initialization'.,initialization-
 'finalization'.,finalization-
initialization,initialization1,handleinitializationstart,
 '',statementblock-^*
initialization1,,handleinitialization,handleendexpected
 ${whitespace}
 'finalization'.,finalization-
 'end'.,implementationend-
finalization,finalization1,handlefinalizationstart,
 '',statementblock-^*
finalization1,,handlefinalization,handleendexpected
 'end'.,implementationend-
implementationend,,,handleimplementation*

main,main1,,handleafterimpluses
 ${whitespace}
 'uses'.,impluses-
impluses,main1,handleimplusesentry,handleafterimpluses
//terminate interface parsing
 '',uses0-*
main1,,,handlemain
 ${whitespace}
 'type'.,type-*>
 'const'.,const-*>
 'var'.,var-*>
 'label'.,label-*>
 'procedure'.,procedure-^*>
 'function'.,function-^*>
 'constructor'.,constructor-^*>
 'destructor'.,destructor-^*>
 'begin'.,progbegin-

curlycomment0,,,handlecommentend^>
 '}',-*
 '',-
bracecomment0,,,handlecommentend^>
 '*)',-*
 '',-
directive,directive1,,*
 'dumpelements'.,dumpelements-*
 'dumpopcode'.,dumpopcode-*
 'abort'.,abort-*
 'stoponerror'.,stoponerror-*
 'nop'.,nop-*
 'include'.,include-*
 'define'.,define-*
 'undef'.,undef-*
 'ifdef'.,ifdef-*
 'else'.,elseif-*
 'endif'.,endif-*
 '}',-*
 '',-
directive1,,,*
 '}',-*
 '',-

include,include1,,
 @whitespace,-
 '''',string-*
 '',token*
include1,,,handleinclude*>
 '}',-*
 '',-
 
dumpelements,directiveend,handledumpelements,
dumpopcode,directiveend,handledumpopcode,
nop,directiveend,handlenop,
abort,directiveend,handleabort,
stoponerror,directiveend,handlestoponerror,

define,directiveend,,handledefine
 '',getident^*
undef,directiveend,,handleundef
 '',getident^*

ifdef,directiveend,,handleifdef
 '',getident^*

skipif,directiveend,,
 '}',skipif0-
 '',-
skipif0,,,
 '{$',skipif1->
 '',-
skipif1,,,
 'else'.,skipifelse-
 'endif'.,directiveend-
skipifelse,directiveend,handleskipifelseentry,

elseif,skipelse,,handleelseif

skipelse,directiveend,,
 '}',skipelse0-
 '',-
skipelse0,,,
 '{$',skipelse1->
 '',-
skipelse1,,,
 'endif'.,directiveend-
 
endif,directiveend,handleendif,

directiveend,,,^*>
 '}',-*
 '',
linecomment0,,,*
 #$0a,linecomment1-
 '',-
linecomment1,,,handlecommentend^>
progbegin,progblock,handleprogbegin,
progblock,,,handleprogblock*
 '',statementblock-^*

paramsdef0,,,
 ${whitespace}
 '(',paramsdef1-
paramsdef1,paramsdef2,,
 '',paramdef0^*
paramsdef2,,,
 ${whitespace}
 ';',paramsdef1-
 ')',paramsdef3-
paramsdef3,,,^
paramdef0,paramdef1,handleparamsdef0entry,
 ${whitespace}
 'const'.,!setconstparam->
 'var'.,!setvarparam->
 'out'.,!setoutparam->
 @identstart,ident^*
paramdef1,,,*
 ${whitespace}
 ':',paramdef2-
paramdef2,,,handleparamdef2^
 '',getfieldtype*

subfunctionheader,subheader,handlefunctionentry,
subprocedureheader,subheader,handleprocedureentry,
methfunctionheader,subheader,handlemethfunctionentry,
methprocedureheader,subheader,handlemethprocedureentry,
methconstructorheader,subheader,handlemethconstructorentry,
methdestructorheader,subheader,handlemethdestructorentry,
proceduretypedef,subtypedef,handleproceduretypedefentry,

subtypedef,,,*
 '',subtypedef0*
subtypedef0,subheader1,handlesubtypedef0entry, //push dummy ident

subheader,,,*
 '',subheader0*
function,sub,handlefunctionentry,
procedure,sub,handleprocedureentry,
constructor,sub,handleconstructorentry,
destructor,sub,handledestructorentry,

sub,suba,,
 '',subheader0*
suba,,,
 '',subbody4*
subheader0,subheader1,,
 ${whitespace}
 @identstart,identpath^*
subheader1,subheader2,handlesub1entry,
 '',paramsdef0^*
subheader2,subheader3,,
 ${whitespace}
 ':',functiontype-^*
subheader3,,,
 ${whitespace}
 'virtual'.,!handlevirtual-
 'override'.,!handleoverride-
 'overload'.,!handleoverload-
 'external'.,!handleexternal-
 ';',subheader4-
 '',semicolonexpected
subheader4,,,
 ${whitespace}
 'virtual'.,virtual-
 'override'.,override-
 'overload'.,overload-
 'external'.,external-
 '',!handlesubheader*
virtual,subheader3,handlevirtual,
override,subheader3,handleoverride,
overload,subheader3,handleoverload, 
external,subheader3,handleexternal, 

functiontype,,,
 '',resultident*
resultident,,checkfunctiontype,
 '',getfieldtype*

functiontypea,,, //same layout as parameter
 ${whitespace}
 @identstart,ident^*

subbody4,,,handlebeginexpected*
 ${whitespace}
 'type'.,type-*>
 'const'.,const-*>
 'var'.,var-*>
 'label'.,label-*>
 'procedure'.,procedure-^*>
 'function'.,function-^*>
 'begin'.,subbody5a-
subbody5a,subbody5,handlesubbody5a, //set procstartaddress
subbody5,subbody5b,,
 '',statementblock^*
subbody5b,,,handleendexpected*
 'end'.,subbody6-
subbody6,checkterminatorpop,handlesubbody6, //return, release

checkterminator,,,handlecheckterminator
 ';',terminatorok-
 ${whitespace}
terminatorok,,,*
checkterminatorpop,,,handlecheckterminator
 ';',terminatorokpop-
 ${whitespace}
terminatorokpop,,,^*

statementstack,,,^
 '',statement*
statement,,,*
 ${whitespace}
 ';',endcontext-
 'begin'.,compoundstatement-
 ${blockends}
 'with'.,with-
 'if'.,if0-
 'case'.,case-
 'while'.,while-
 'repeat'.,repeat-
 'for'.,for-
 'try'.,try-*
 'raise'.,raise-
 '',simplestatement

compoundstatement,checkend,,*
 '',statementblock-^*
//
// exception
//
try,try1,handletryentry,
 '',statementblock^*
try1,,,handlefinallyexpected*
 'finally'.,finally-
 'except'.,except-
finally,finally1,handlefinallyentry,
 '',statementblock^*
finally1,,handlefinally,*
 '',checkend*
except,except1,handleexceptentry,
 '',statementblock^*
except1,,handleexcept,*
 '',checkend*

raise,,,handleraise*
 '',exp^*

checkend,,,*
 ${whitespace}
 'end'.,-*
 '',!handleendexpected*

with,with1,,handlewithentry
with1,with2,,
 '',addressfact*
with2,,handlewith2entry,handledoexpected*
 ${whitespace}
 ',',with1-
 'do'.,with3-
with3,,,handlewith3*
 '',statement*

endcontext,,,
blockend,,,handleblockend^*
simplestatement,,,*
 '',statement0*
statementblock,statementblock1,,*
 '',statement*
statementblock1,,,handlestatementblock1*
 ${whitespace}
 ';',statementblock-
 ${blockends}

statement0,statement1,handlestatement0entry,
 '',exp^*
statement1,,,handlestatementexit
 ${whitespace}
 ':=',assignment-
assignment,,handleassignmententry,handleassignment
 '',exp^*
//
// control todo: better names instead of *n
//          
if0,then,handleif0,
 '',exp^*
then,,,handlethen
 ${whitespace}
 'then'.,then0-
then0,then2,handlethen0,
 '',statementstack^*
then2,,,handlethen2
 ${whitespace}
 'else'.,else0-
else0,else,handleelse0,
else,,,handleelse
 '',statementstack^*

while,whiledo,handlewhilestart,
 '',exp^*
whiledo,,,handledoexpected
 ${whitespace}
 'do'.,whiledo0-
whiledo0,,handlewhileexpression,handlewhileend*
 '',statementstack^*

repeat,,handlerepeatstart,handleuntilexpected
 ${whitespace}
 'until'.,repeatuntil0-
 '',statement*>
repeatuntil0,,handleuntilentry,handlerepeatend*
 '',exp^*

for,forvar,,
 '',exp^*
forvar,,handleforvar,handleassignmentexpected
 ':=',forstart-
forstart,forto,,handleforstart
 '',exp^*
forto,,,handletoexpected
 'to'.,forstop-
 'downto'.,downto-
downto,forstop,,handledownto
forstop,fordo,,
 '',exp^*
fordo,,,handledoexpected
 'do'.,forbody-
forbody,,handleforheader,handleforend*
 '',statementstack^*

case,caseof,handlecasestart,
 '',exp^*
caseof,,handlecaseexpression,handlecase*
 'of'.,casebranch-^*
 '',!handleofexpected*
casebranch,casebranch1,,
 ${whitespace}
 'else'.,caseelse-*
 'end'.,caseend-
 '',commasepexp^*
casebranch1,,,handlecolonexpected
 ${whitespace}
 ':',casebranch2-*
casebranch2,casebranch3,handlecasebranchentry,*
 '',statementstack^*
casebranch3,casebranch,handlecasebranch,
 ${whitespace}
 ';',casebranch-
 'else'.,caseelse-*
 'end'.,caseend-
caseelse,checkcaseend,,
 'end'.,caseend-
 '',statementblock^*
checkcaseend,caseend,,
 ${whitespace}
 ';',-
 '',checkend*
caseend,,,^

commasepexp,commasepexp1,,
 '',exp^*
commasepexp1,,,^
 ',',commasepexp-
 '..',commasepexp2-
commasepexp2,commasepexp3,,
 '',exp^*
commasepexp3,,handlecommaseprange,^
 ',',commasepexp-

simpletype,rangetype,,+
 @identstart,typeident*
typeident,checktypeident,,
 '',identpath^*
checktypeident,,,handlechecktypeident
rangetype,,,handlecheckrangetype*^
 '',getrange^*

setdef,,,handleofexpected
 ${whitespace}
 'of'.,setdef1-
setdef1,,,handlesettype*^
 '',getfieldtype^*

recorddef,recorddef1,handlerecorddefstart,
recorddef1,recorddeferror,,
 ${whitespace}
 @identstart,recordfield^*
 'end'.,recorddefreturn-
recorddeferror,,,handlerecorddeferror^
recordfield,,,handlerecordfield^*>
 '',vardef^*
recorddefreturn,,handlerecordtype,*^

arraydef,arraydef1,,
 'of'.,arraydef2-
 ${whitespace}
 '',arrayindex*
arraydef1,,,handlearraydeferror1
 ${whitespace}
 'of'.,arraydef2-
arraydef2,,,handlearraytype
 '',getfieldtype^*

enumdef,enumdef1,handleenumdefentry,
 '',getenumitem^*
enumdef1,,,handlecloseroundbracketexpected^*
 ')',enumdef3-
  ',',enumdef2-
enumdef2,enumdef1,,
 '',getenumitem^*
enumdef3,,,handleenumdef^*

getenumitem,getenumitem1,,
 '',getident^*
getenumitem1,,,handleenumitem^
 ${whitespace}
 '=',getenumitem2-
getenumitem2,,,handleenumitemvalue^
 '',exp^*
arrayindex,,,handlearrayindexerror1
 '[',arrayindex1-
arrayindex1,arrayindex2,,
 '',getfieldtype^*
arrayindex2,,,
 ',',getfieldtype-^*>
 ']',-*
  '',!handlearrayindexerror2*

getfieldtype,gettype,handlegetfieldtypestart,
gettypetype,gettype,handlegettypetypestart,
gettype,,,*^
 ${whitespace}
 '^',!handlepointertype-
 '(',enumdef-^*
 'set'.,setdef-^*
 'record'.,recorddef-^*
 'array'.,arraydef-^*
 'class'.,classdef-^*
 'interface'.,interfacedef-^*
 'procedure'.,proceduretypedef-*,typedefreturn^
 '',simpletype^*
typedefreturn,,,*>
//
// defs
//
type,,,handletype>
 ${whitespace}
 ${blockswitch}
 '',type0*^
type0,type1,,
 @identstart,identpath^*
type1,,,handleequalityexpected
 ${whitespace}
 '=',type2-
type2,type3,,*
 '',gettypetype^*
type3,,,*>
 ${whitespace}
 ';',-*
 '',semicolonexpected

label,identexpected,,
 ${whitespace}
 ${blockswitch}
 '',label0
label0,label1,,
 @identstart,commaidents^*
 '',identexpected
label1,,handlelabel,*
 ${whitespace}
 ';',-*
 '',semicolonexpected

const,,,*>
 ${whitespace}
 ${blockswitch}
 '',const0^*
const0,const1,,^
 ${whitespace}
 @identstart,ident^*
 '',!handleidentexpected
const1,,,handleequalityexpected^
 ${whitespace}
 '=',const2-
const2,const3,,
 '',exp^*
const3,,handleconst3,
 '',checksemicolon1

var,,,*>
 ${whitespace}
 ${blockswitch}
 '',var0*^
var0,var1,,
 @identstart,commaidents^*
var1,,handlevardefstart,
 ${whitespace}
 ':',var2-
var2,var3,,
 '',getfieldtype^*
var3,checksemicolon2,,handlevar3

vardef,vardef0,,
 '',ident^*
vardef0,,handlevardefstart,
 ${whitespace}
 ':',vardef1-
vardef1,checksemicolon,,
 '',getfieldtype^*

getrange,getrange1,,
 '',exp^*
getrange1,,,handlerange1
 ${whitespace}
 '..',getrange3-
getrange3,,,handlerange3^
 '',exp^*

classdef,classdef0,handleclassdefstart,
 ${whitespace}
 '(',classdefparam-*
classdef0,classdeferror,,
 ${whitespace}
 'private'.,!handleclassprivate-
 'protected'.,!handleclassprotected-
 'public'.,!handleclasspublic-
 'published'.,!handleclasspublished-
 'procedure'.,methprocedureheader-*^>
 'function'.,methfunctionheader-*^>
 'constructor'.,methconstructorheader-*^>
 'destructor'.,methdestructorheader-*^>
 @identstart,classfield^*>
 'end'.,classdefreturn-
classdeferror,,handleclassdeferror,^
classdefreturn,,handleclassdefreturn,*^
classdefparam,,,*
 ${whitespace}
 @identstart,classdefparam1*
 ')',-*
 '',!handlecloseroundbracketexpected
classdefparam1,classdefparam2,,
 '',identpath^*
classdefparam2,classdefparam2a,,handleclassdefparam2*
classdefparam2a,,,*
 ${whitespace}
 ',',classdefparam3-
 ')',-*
 '',!handlecloseroundbracketexpected
classdefparam3,classdefparam3a,,
 '',identpath^*
classdefparam3a,classdefparam2a,,handleclassdefparam3a*

classfield,,,handleclassfield^*
 '',vardef^*

interfacedef,interfacedef0,handleinterfacedefstart,
 ${whitespace}
 '(',interfacedefparam-^*
interfacedef0,interfacedeferror,,
 ${whitespace}
 'procedure'.,methprocedureheader-*^>
 'function'.,methfunctionheader-*^>
 'end'.,interfacedefreturn-

interfacedeferror,,handleinterfacedeferror,^
interfacedefreturn,,handleinterfacedefreturn,^*

interfacedefparam,,,handleinterfaceparam^*
 ${whitespace}
 @identstart,interfaceparam1^*
 ')',-*
 '',!handlecloseroundbracketexpected
interfaceparam1,interfaceparam2,,
 '',identpath^*
interfaceparam2,,handleinterfaceparam2entry,^
 ${whitespace}
 ',',interfaceparam3-
 ')',-*
 '',!handlecloseroundbracketexpected
interfaceparam3,,,handleidentexpected*
 ${whitespace}
 @identstart,interfaceparam1*

statementend,,,handlestatementend!
//
// expression
//
exp,,,handleexp^
 '',callexp*
callexp,exp1,,
 '',simpexp*
exp1,,,handleexp1
 ${whitespace}
 '=',eqsimpexp-* 
 '<>',nesimpexp-* 
 '>',gtsimpexp-* 
 '<',ltsimpexp-* 
 '>=',gesimpexp-* 
 '<=',lesimpexp-* 

eqsimpexp,,,handleeqsimpexp
 '',simpexp*
nesimpexp,,,handlenesimpexp
 '',simpexp*
gtsimpexp,,,handlegtsimpexp
 '',simpexp*
ltsimpexp,,,handleltsimpexp
 '',simpexp*
gesimpexp,,,handlegesimpexp
 '',simpexp*
lesimpexp,,,handlelesimpexp
 '',simpexp*

simpexp,simpexp1,,
 '',term*
simpexp1,simpexp1,,
 ${whitespace}
 '+',addterm-*
 '-',subterm-*
 'or'.,orterm-*
 '',simpexp1a
simpexp1a,,,handlesimpexp1

addterm,,,handleaddterm
 '',term*
subterm,,,handlesubterm
 '',term*
orterm,,,handleorterm
 '',term*

term,term1,,
 '',fact*
term1,,,handleterm
 ${whitespace}
 '*',mulfact-*>
 'and'.,andfact-*>
 'shl'.,shlfact-*>
 'shr'.,shrfact-*>

mulfact,,,handlemulfact
 '',fact*
andfact,,,handleandfact
 '',fact*
shlfact,,,handleshlfact
 '',fact*
shrfact,,,handleshrfact
 '',fact*

addressfact,fact0,handleaddressfactentry,
addressopfact,fact0,handleaddressopfactentry,
fact,fact0,handlefactentry,
fact0,fact1,,
 ${whitespace}
 '+',-
 '-',negfact-*
 'not'.,notfact-*
 '@',addressopfact-*
// '@',!handleaddressfact-
 '(',bracketstart-*
 @decnum,num*
 '%',binnum-*
 '&',octnum-*
 '$',hexnum-*
 '''',string-*
 '#',char-*
 'and'.,*
 'shl'.,*
 'shr'.,*
 'or'.,*
 @identstart,valueidentifier*
 '',illegalexpression

fact1,,,handlefact1
 ${whitespace}
 '^',!handledereference-
 '[',getindex-^*>
 '..',*
 '.',fact2-

fact2,fact1,handlefact2entry,
 '',valueidentifierwhite*

negfact,,,handlenegfact
 '',fact*
notfact,,,handlenotfact
 '',fact*

//addressfact,,handleaddressfactentry,handleaddressfact
// '',fact*

bracketstart,bracketend,,
 '',callexp*
bracketend,,,handlebracketend
 ${whitespace}

valueidentifier,checkvalueparams,,
 '',valuepath^*
valueidentifierwhite,checkvalueparams,,
 ${whitespace}
 '',valuepath^*

checkvalueparams,,,handlevalueidentifier
 ${whitespace}
 '(',params0-^*
checkparams,,,^
 ${whitespace}
 '(',params0-
params0,params1,handleparams0entry,
 ${whitespace}
 ')',paramsend-
params1,params2,,
 '',exp^*
params2,,,
 ${whitespace}
 ',',params1-
 ')',paramsend-
paramsend,,handleparamsend,^

getindex,getindex1,handleindexstart,
 '',exp^*
getindex1,,,handleindex
 ${whitespace}
 ']',-*
 ',',getindex2-
 '',!handleclosesquarebracketexpected
getindex2,getindex1,,
 '',exp^*

illegalexpression,,,handleillegalexpression*

// todo: use handler for number evaluation
num,,,handleint
 @decnum,-
 '.',checkfrac-+*
 'e','E',fracexp-*
fracexp,frac,,
 '',exponent*
checkfrac,,,*+
 @decnum,frac
frac,,,handlefrac
 @decnum,-
 'e','E',exponent-*
exponent,,,handleexponent
 '',number*
number,,handlenumberentry,
 '+',!posnumber-
 '-',!negnumber-
 @decnum,decnum
 '',numberexpected
decnum,,,handledecnum
 @decnum,-

binnum,,,handlebinnum
 @binnum,-
octnum,,,handleoctnum
 @octnum,-
hexnum,,,handlehexnum
 @hexnum,-
 
ordnum,,,
 @decnum,decnum
 '%',binnum-
 '&',octnum-
 '$',hexnum-
 '',numberexpected
string,,handlestringstart,
 '''',string1-
 #$0a,!stringlineenderror-*
 '',-
string1,,copystring,
 '''',apostrophe-
 '#',char-
apostrophe,,copyapostrophe,
 '''',string1-
 '',string
token,,handlestringstart,copytoken
 @whitespace,'}',*
 '',-

char,char1,handlestringstart,
 '',ordnum*
char1,string,handlechar,
 '''',string-
 '#',char-
 '',char2
char2,,,

ident,ident0,,
 'implementation'.,reservedword
 'type'.,reservedword
 'const'.,reservedword
 'var'.,reservedword
 'label'.,reservedword
 'begin'.,reservedword
 'procedure'.,reservedword
 'function'.,reservedword
 'constructor'.,reservedword
 'destructor'.,reservedword
 'end'.,reservedword
 'else'.,reservedword
 'initialization'.,reservedword
 'finalization'.,reservedword
 'finally'.,reservedword
 'except'.,reservedword
reservedword,,,handlereservedword^
ident0,,handleidentstart,handleident^
 @identstart,@decnum,-

getident,,,^
 ${whitespace}
 @identstart,ident
 '',!handleidentexpected*

commaidents,commaidentsnoidenterror,, //comma separated idents on stack
 ${whitespace}
 @identstart,commaidents1
commaidents1,commaidents2,,
 '',ident^*
commaidents2,,,^
 ',',commaidents-
commaidentsnoidenterror,,,handlenoidenterror

identpathcontinue,,,^>
 '',identpath^*
identpath,identpath1a,handleidentpathstart,
 @identstart,@decnum,-
identpath1a,identpath1,handleidentpath1a, //set ident
identpath1,,,^                            //finish
 ${whitespace}
 '..',*
 '.',identpath2a+-
identpath2a,identpath2,handleidentpath2a, //set continue flag
identpath2,,,handleidentpath2^            //error
 ${whitespace}
 @identstart,identpath*

valuepathcontinue,,,^>
 '',valuepath^*
valuepath,valuepath0,,
valuepath0,valuepath0a-,handlevaluepathstart,
 ${whitespace}
 'inherited'.,!handlevalueinherited-
valuepath0a,valuepath1a,,
 @identstart,@decnum,-
valuepath1a,valuepath1,handlevaluepath1a, //set ident
valuepath1,,,^                            //finish
 ${whitespace}
// '..',*
 '.',valuepath2a+-
valuepath2a,valuepath2,handlevaluepath2a, //set continue flag
valuepath2,,,handlevaluepath2^            //error
 ${whitespace}
 @identstart,valuepath*

numberexpected,,,handlenumberexpected*
