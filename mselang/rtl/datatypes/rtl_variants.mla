{ MSElang Copyright (c) 2017 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}
//
//under construction
//
unit rtl_variants;
interface
uses
 rtl_exceptions;
 
const
 VT_EMPTY = $0000;
 VT_NULL = $0001;
 VT_I2 = $0002;
 VT_I4 = $0003;
 VT_R4 = $0004;
 VT_R8 = $0005;
 VT_CY = $0006;
 VT_DATE = $0007;
 VT_BSTR = $0008;
 VT_DISPATCH = $0009;
 VT_ERROR = $000A;
 VT_BOOL = $000B;
 VT_VARIANT = $000C;
 VT_UNKNOWN = $000D;
 VT_DECIMAL = $000E;
 VT_15 = $000F;
 VT_I1 = $0010;
 VT_UI1 = $0011;
 VT_UI2 = $0012;
 VT_UI4 = $0013;
 VT_I8 = $0014;
 VT_UI8 = $0015;
 VT_INT = $0016;
 VT_UINT = $0017;
 VT_VOID = $0018;
 VT_HRESULT = $0019;
 VT_PTR = $001A;
 VT_SAFEARRAY = $001B;
 VT_CARRAY = $001C;
 VT_USERDEFINED = $001D;
 VT_LPSTR = $001E;
 VT_LPWSTR = $001F;
 VT_RECORD = $0024;
 VT_INT_PTR = $0025;
 VT_UINT_PTR = $0026;
 VT_ARRAY = $2000;
 VT_BYREF = $4000;
 numvariantmax = VT_UI8;

type
 varianttypety = card16;

 variantty = object [nozeroinit]
  protected
   vtype: varianttypety;
   (res1,res2,res3: card16;
    (vint8: int8);     //VT_I1
    (vint16: int16);   //VT_I2
    (vint32: int32);   //VT_I4
    (vint64: int64);   //VT_I8
    (vcard8: card8);   //VT_UI1
    (vcard16: card16); //VT_UI2
    (vcard32: card32); //VT_UI4
    (vcard64: card64); //VT_UI8
    (vflo32: flo32);   //VT_R4
    (vflo64: flo64);   //VT_R8
   );
   (vbytes: array[0..13] of card8);

   method commontermtype(const b: variantty): varianttypety;
   method operandtypeerror(const aoperand: string8);
   method operandtypeerror(const b: variantty; const aoperand: string8);
   method tovalueerror(const atype: card16);
   method ini() [ini];
   method fini() [fini];
   method tovariant(const avalue: int8) [operator=':='];
   method tovariant(const avalue: int16) [operator=':='];
   method tovariant(const avalue: int32) [operator=':='];
   method tovariant(const avalue: int64) [operator=':='];
   method tovariant(const avalue: card8) [operator=':='];
   method tovariant(const avalue: card16) [operator=':='];
   method tovariant(const avalue: card32) [operator=':='];
   method tovariant(const avalue: card64) [operator=':='];
   method tovariant(const avalue: flo32) [operator=':='];
   method tovariant(const avalue: flo64) [operator=':='];
   method tovalue(): int8 [operator=':='];
   method tovalue(): int16 [operator=':='];
   method tovalue(): int32 [operator=':='];
   method tovalue(): int64 [operator=':='];
   method tovalue(): card8 [operator=':='];
   method tovalue(): card16 [operator=':='];
   method tovalue(): card32 [operator=':='];
   method tovalue(): card64 [operator=':='];
   method tovalue(): flo32 [operator=':='];
   method tovalue(): flo64 [operator=':='];
   method neg() [operator='-'];
   method add(const b: variantty) [operator='+'];
   method sub(const b: variantty) [operator='-'];
 end;

 evariant = class(cexception)
  constructor create(const message: string8; const atype: card16);
  property varianttype: card16 read ftype;

  protected
   ftype: card16;
 end;

 evarianttovalue = class(evariant)
  constructor create(const source,dest: card16);
  property source: card16 read ftype;
  property dest: card16 read fdest;

  protected
   fdest: card16;
 end;
  
implementation
uses
 rtl_base;
 
{ evariant }

constructor evariant.create(const message: string8; const atype: card16);
begin
 inherited create(message);
 ftype:= atype;
end;

{ evarianttovalue }

constructor evarianttovalue.create(const source,dest: card16);
begin
 fdest:= dest;
 inherited create('Can not convert type '+inttostr(source)+
                                               'to '+inttostr(dest),source);
end;

{ variantty }

method variantty.tovalueerror(const atype: card16);
begin
 raise evarianttovalue.create(vtype,atype);
end;

method variantty.operandtypeerror(const aoperand: string8);
begin
 writeln('variant operandtypeerror a: ',vtype,' "'+aoperand+'"');
 //todo
end;

method variantty.operandtypeerror(const b: variantty; const aoperand: string8);
begin
 writeln('variant operandtypeerror a: ',vtype,' b: ',b.vtype,' "'+aoperand+'"');
 //todo
end;

method variantty.ini();
begin
 vtype:= VT_EMPTY;
end;

method variantty.fini();
begin
 //todo
end;

method variantty.tovariant(const avalue: int8);
begin
 fini();
 vtype:= VT_I1;
 vint8:= avalue;
end;

method variantty.tovariant(const avalue: int16);
begin
 fini();
 vtype:= VT_I2;
 vint16:= avalue;
end;

method variantty.tovariant(const avalue: int32);
begin
 fini();
 vtype:= VT_I4;
 vint32:= avalue;
end;

method variantty.tovariant(const avalue: int64);
begin
 fini();
 vtype:= VT_I8;
 vint64:= avalue;
end;

method variantty.tovariant(const avalue: card8);
begin
 fini();
 vtype:= VT_UI1;
 vcard8:= avalue;
end;

method variantty.tovariant(const avalue: card16);
begin
 fini();
 vtype:= VT_UI2;
 vcard16:= avalue;
end;

method variantty.tovariant(const avalue: card32);
begin
 fini();
 vtype:= VT_UI4;
 vcard32:= avalue;
end;

method variantty.tovariant(const avalue: card64);
begin
 fini();
 vtype:= VT_UI8;
 vcard64:= avalue;
end;

method variantty.tovariant(const avalue: flo32);
begin
 fini();
 vtype:= VT_R4;
 vflo32:= avalue;
end;

method variantty.tovariant(const avalue: flo64);
begin
 fini();
 vtype:= VT_R8;
 vflo64:= avalue;
end;

method variantty.tovalue(): int8;
begin
 case vtype of
  VT_I1,VT_UI1:
   result:= vint8;
  VT_I2,VT_UI2:
   result:= vint16;
  VT_I4,VT_UI4:
   result:= vint32;
  VT_I8,VT_UI8:
   result:= vint64;
  VT_R4:
   result:= truncint32(vflo32);
  VT_R8:
   result:= truncint32(vflo64);
  else
   tovalueerror(VT_I1);
 end;
end;

method variantty.tovalue(): int16;
begin
 case vtype of
  VT_I1,VT_UI1:
   result:= vint8;
  VT_I2,VT_UI2:
   result:= vint16;
  VT_I4,VT_UI4:
   result:= vint32;
  VT_I8,VT_UI8:
   result:= vint64;
  VT_R4:
   result:= truncint32(vflo32);
  VT_R8:
   result:= truncint32(vflo64);
  else
   tovalueerror(VT_I2);
 end;
end;

method variantty.tovalue(): int32;
begin
 case vtype of
  VT_I1,VT_UI1:
   result:= vint8;
  VT_I2,VT_UI2:
   result:= vint16;
  VT_I4,VT_UI4:
   result:= vint32;
  VT_I8,VT_UI8:
   result:= vint64;
  VT_R4:
   result:= truncint32(vflo32);
  VT_R8:
   result:= truncint32(vflo64);
  else
   tovalueerror(VT_I4);
 end;
end;

method variantty.tovalue(): int64;
begin
 case vtype of
  VT_I1,VT_UI1:
   result:= vint8;
  VT_I2,VT_UI2:
   result:= vint16;
  VT_I4,VT_UI4:
   result:= vint32;
  VT_I8,VT_UI8:
   result:= vint64;
  VT_R4:
   result:= truncint64(vflo32);
  VT_R8:
   result:= truncint64(vflo64);
  else
   tovalueerror(VT_I8);
 end;
end;

method variantty.tovalue(): card8;
begin
 case vtype of
  VT_I1,VT_UI1:
   result:= vint8;
  VT_I2,VT_UI2:
   result:= vint16;
  VT_I4,VT_UI4:
   result:= vint32;
  VT_I8,VT_UI8:
   result:= vint64;
  VT_R4:
   result:= trunccard32(vflo32);
  VT_R8:
   result:= trunccard32(vflo64);
  else
   tovalueerror(VT_UI1);
 end;
end;

method variantty.tovalue(): card16;
begin
 case vtype of
  VT_I1,VT_UI1:
   result:= vint8;
  VT_I2,VT_UI2:
   result:= vint16;
  VT_I4,VT_UI4:
   result:= vint32;
  VT_I8,VT_UI8:
   result:= vint64;
  VT_R4:
   result:= trunccard32(vflo32);
  VT_R8:
   result:= trunccard32(vflo64);
  else
   tovalueerror(VT_UI2);
 end;
end;

method variantty.tovalue(): card32;
begin
 case vtype of
  VT_I1,VT_UI1:
   result:= vint8;
  VT_I2,VT_UI2:
   result:= vint16;
  VT_I4,VT_UI4:
   result:= vint32;
  VT_I8,VT_UI8:
   result:= vint64;
  VT_R4:
   result:= trunccard32(vflo32);
  VT_R8:
   result:= trunccard32(vflo64);
  else
   tovalueerror(VT_UI4);
 end;
end;

method variantty.tovalue(): card64;
begin
 case vtype of
  VT_I1,VT_UI1:
   result:= vint8;
  VT_I2,VT_UI2:
   result:= vint16;
  VT_I4,VT_UI4:
   result:= vint32;
  VT_I8,VT_UI8:
   result:= vint64;
  VT_R4:
   result:= trunccard64(vflo32);
  VT_R8:
   result:= trunccard64(vflo64);
  else
   tovalueerror(VT_UI8);
 end;
end;

method variantty.tovalue(): flo32;
begin
 case vtype of
  VT_I1,VT_UI1:
   result:= vint8;
  VT_I2,VT_UI2:
   result:= vint16;
  VT_I4,VT_UI4:
   result:= vint32;
  VT_I8,VT_UI8:
   result:= vint64;
  VT_R4:
   result:= vflo32;
  VT_R8:
   result:= vflo64;
  else
   tovalueerror(VT_R4);
 end;
end;

method variantty.tovalue(): flo64;
begin
 case vtype of
  VT_I1,VT_UI1:
   result:= vint8;
  VT_I2,VT_UI2:
   result:= vint16;
  VT_I4,VT_UI4:
   result:= vint32;
  VT_I8,VT_UI8:
   result:= vint64;
  VT_R4:
   result:= vflo32;
  VT_R8:
   result:= vflo64;
  else
   tovalueerror(VT_R8);
 end;
end;

const
 commontermtypes: array[0..numvariantmax][0..numvariantmax] of card16 = (
//todo: fix wrong values

//VT_EMPTY = $0000;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_EMPTY,  VT_EMPTY,  VT_EMPTY,  VT_EMPTY,  VT_EMPTY,  VT_EMPTY,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_EMPTY,  VT_EMPTY,  VT_EMPTY,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_EMPTY,  VT_EMPTY,  VT_EMPTY,  VT_EMPTY,  VT_EMPTY,  VT_EMPTY,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_EMPTY,  VT_EMPTY,  VT_EMPTY,  VT_EMPTY,  VT_EMPTY,  VT_EMPTY),

//VT_NULL = $0001;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_NULL,   VT_NULL,   VT_NULL,   VT_NULL,   VT_NULL,   VT_NULL,   VT_NULL,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_NULL,   VT_NULL,   VT_NULL,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_NULL,   VT_NULL,   VT_NULL,   VT_NULL,   VT_NULL,   VT_NULL,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_NULL,   VT_NULL,   VT_NULL,   VT_NULL,   VT_NULL,   VT_NULL),

//VT_I2 = $0002;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_I2,     VT_I4,     VT_R4,     VT_R8,     VT_CY,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_ERROR,  VT_I2,     VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_I2,     VT_I2,     VT_I4,     VT_I8,     VT_I8,     VT_I8),

// VT_I4 = $0003;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_I4,     VT_I4,     VT_R8,     VT_R8,     VT_CY,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_ERROR,  VT_I4,     VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_I4,     VT_I4,     VT_I4,     VT_I8,     VT_I8,     VT_I8),

// VT_R4 = $0004;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_R4,     VT_R4,     VT_R4,     VT_R8,     VT_R8,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_ERROR,  VT_R4,     VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_R4,     VT_R4,     VT_R4,     VT_R8,     VT_R8,     VT_R8),

// VT_R8 = $0005;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_R8,     VT_R8,     VT_R8,     VT_R8,     VT_R8,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_ERROR,  VT_R8,     VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_R8,     VT_R8,     VT_R8,     VT_R8,     VT_R8,     VT_R8),

// VT_CY = $0006;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_CY,     VT_CY,     VT_R8,     VT_R8,     VT_CY,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_CY,     VT_CY,     VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_CY,     VT_CY,     VT_CY,     VT_R8,     VT_R8,     VT_CY),

// VT_DATE = $0007;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_DATE,   VT_DATE,     VT_R8,     VT_R8,     VT_R8,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_UNKNOWN,VT_UNKNOWN,VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_DATE,   VT_DATE,   VT_DATE,   VT_DATE,   VT_DATE,   VT_DATE),

// VT_BSTR = $0008;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_BSTR,   VT_BSTR,   VT_BSTR,   VT_BSTR,   VT_BSTR,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_BSTR,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_BSTR,   VT_BSTR,   VT_VARIANT,VT_UNKNOWN,VT_BSTR,   VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_BSTR,   VT_BSTR,   VT_BSTR,   VT_BSTR,   VT_BSTR,   VT_BSTR),

// VT_DISPATCH = $0009;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_UNKNOWN,VT_UNKNOWN,VT_DISPATCH,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_UNKNOWN,VT_UNKNOWN,VT_VARIANT,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN),

// VT_ERROR = $000A;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_I4,     VT_I4,     VT_R4,     VT_R8,     VT_CY,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_ERROR,  VT_I4,     VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_I4,     VT_I4,     VT_I4,     VT_I8,     VT_I8,     VT_I8),

// VT_BOOL = $000B;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_I2,     VT_I4,     VT_R4,     VT_R8,     VT_CY,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_ERROR,  VT_BOOL,     VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_I1,     VT_UI1,    VT_UI2,    VT_UI4,    VT_I8,     VT_UI8),

// VT_VARIANT = $000C;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_VARIANT,VT_VARIANT,VT_VARIANT,VT_VARIANT,VT_VARIANT,VT_VARIANT,VT_VARIANT,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_VARIANT,VT_VARIANT,VT_VARIANT,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_VARIANT,VT_VARIANT,VT_VARIANT,VT_VARIANT,VT_VARIANT,VT_VARIANT,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_VARIANT,VT_VARIANT,VT_VARIANT,VT_VARIANT,VT_VARIANT,VT_VARIANT),

// VT_UNKNOWN = $000D;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN),

// VT_DECIMAL = $000E;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_DECIMAL,VT_DECIMAL,VT_R8,     VT_R8,     VT_DECIMAL,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_ERROR,  VT_DECIMAL,VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_DECIMAL,VT_DECIMAL,VT_DECIMAL,VT_DECIMAL,VT_DECIMAL,VT_DECIMAL),

// VT_15 = $000F
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN,VT_UNKNOWN),

// VT_I1 = $0010;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_I2,     VT_I4,     VT_R4,     VT_R8,     VT_CY,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_ERROR,  VT_I1,     VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_I1,     VT_I2,     VT_I4,     VT_I8,     VT_I8,     VT_I8),

// VT_UI1 = $0011;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_I4,     VT_I4,     VT_R4,     VT_R8,     VT_CY,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_ERROR,  VT_UI1,    VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_I2,     VT_UI1,    VT_UI2,    VT_UI4,    VT_I8,     VT_UI8),

// VT_UI2 = $0012;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_I4,     VT_I4,     VT_R4,     VT_R8,     VT_CY,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_ERROR,  VT_UI2,    VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_I4,     VT_UI2,    VT_UI2,    VT_UI4,    VT_I8,     VT_UI8),

// VT_UI4 = $0013;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_I8,     VT_I8,     VT_R8,     VT_R8,     VT_CY,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_ERROR,  VT_UI4,    VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_I8,     VT_UI4,    VT_UI4,    VT_UI4,    VT_I8,     VT_UI8),

// VT_I8 = $0014;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_I8,     VT_I8,     VT_R8,     VT_R8,     VT_CY,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_ERROR,  VT_I8,     VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_I8,     VT_I8,     VT_I8,     VT_I8,     VT_I8,     VT_I8),

// VT_UI8 = $0015;
//VT_EMPTY   VT_NULL    VT_I2      VT_I4      VT_R4      VT_R8      VT_CY
 (VT_EMPTY,  VT_NULL,   VT_I8,     VT_I8,     VT_R8,     VT_R8,     VT_CY,
//VT_DATE    VT_BSTR    VT_DISPATCH
  VT_DATE,   VT_BSTR,   VT_UNKNOWN,
//VT_ERROR   VT_BOOL    VT_VARIANT VT_UNKNOWN VT_DECIMAL VT_15
  VT_ERROR,  VT_I8,     VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_UNKNOWN,
//VT_I1      VT_UI1     VT_UI2     VT_UI4     VT_I8      VT_UI8
  VT_I8,     VT_I8,     VT_I8,     VT_I8,     VT_I8,     VT_UI8)
 );

method variantty.commontermtype(const b: variantty): varianttypety;
begin
 result:= VT_UNKNOWN;
 if (vtype <= numvariantmax) and (b.vtype <= numvariantmax) then
  result:= commontermtypes[vtype,b.vtype];
 end;
end;

method variantty.neg();
begin
 case vtype of
  VT_I1:
   tovariant(-int8(self));
  VT_I2:
   tovariant(-int16(self));
  VT_I4:
   tovariant(-int32(self));
  VT_I8:
   tovariant(-int64(self));
  VT_R4:
   tovariant(-flo32(self));
  VT_R8:
   tovariant(-flo64(self));
  else
   operandtypeerror('-');
 end;
end;

method variantty.add(const b: variantty);
begin
 case commontermtype(b) of
  VT_I1:
   tovariant(int8(self)+int8(b));
  VT_I2:
   tovariant(int16(self)+int16(b));
  VT_I4:
   tovariant(int32(self)+int32(b));
  VT_I8:
   tovariant(int64(self)+int64(b));
  VT_R4:
   tovariant(flo32(self)+flo32(b));
  VT_R8:
   tovariant(flo64(self)+flo64(b));
  else
   operandtypeerror(b,'+');
 end;
end;

method variantty.sub(const b: variantty);
begin
 case commontermtype(b) of
  VT_I1:
   tovariant(int8(self)-int8(b));
  VT_I2:
   tovariant(int16(self)-int16(b));
  VT_I4:
   tovariant(int32(self)-int32(b));
  VT_I8:
   tovariant(int64(self)-int64(b));
  VT_R4:
   tovariant(flo32(self)-flo32(b));
  VT_R8:
   tovariant(flo64(self)-flo64(b));
  else
   operandtypeerror(b,'-');
 end;
end;

end.
