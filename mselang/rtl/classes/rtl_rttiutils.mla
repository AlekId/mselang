//rtl_rttiutils
{ MSElang Copyright (c) 2018 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}
unit rtl_rttiutils;
interface
uses
 rtl_base,__mla__internaltypes;
type
 pppropertyrttity = ^ppropertyrttity;
 propertyrttiarty = array of ppropertyrttity;

procedure getenumname(const typ: prttity; const value: int32): string8;
procedure getordprop(const instance: tbase;
                                 const propinfo: ppropertyrttity): int64;
procedure getpropinfo(const atypeinfo: pobjectrttity;
                           const propname: string8): ppropertyrttity;
procedure getpropinfo(const instance: tbase;
                           const propname: string8): ppropertyrttity;
procedure getproperties(const instance: tbase): propertyrttiarty;
procedure getproperties(const atypeinfo: pobjectrttity): propertyrttiarty;

procedure isstoredprop(const instance: tbase; 
                           const propinfo: ppropertyrttity): boolean;
implementation
uses
 rtl_sysexceptions,rtl_sysconsts,rtl_strings,__mla__compilerunit,
 rtl_format;

procedure rttierror(const amessage: string8);
begin
 raise erttierror.create(srttierror+':'+lineend+amessage);
end;

procedure rttierror(const amessage: string8; const values: array of const);
begin
 raise erttierror.create(srttierror+':'+lineend+format(amessage,values));
end;

procedure getenumname(const typ: prttity; const value: int32): string8;
begin
 if typ^.kind <> rtk_enum then
  rttierror(senumtypeexpected);
 end;
 result:= __mla__getenumname(pointer(typ),value);
end;
 
type
 propertyaccessty = (pa_none,pa_field,pa_method);

procedure notimplemented(const atext: string8);
begin
 raise enotimplemented.create(atext);
end;

procedure getpropreadad(const instance: tbase; const propinfo: ppropertyrttity;
                   out po: pointer): propertyaccessty;
begin
 result:= pa_none;
 if prf_readfield in propinfo^.flags then
  result:= pa_field;
  po:= pointer(instance)+propinfo^.readaccess.fieldoffset;
 else
  if prf_readproc in propinfo^.flags then
   result:= pa_method;
   if prf_virtualread in propinfo^.flags then
    po:= (ppointer(@ppclassdefty(instance)^^.virtualmethods) + 
                                             propinfo^.readaccess.tableindex)^;
   else
    po:= propinfo^.readaccess.accessproc;
   end;
  end;
 end;
end;

type
 getter8ty = method(): int8;
 getter16ty = method(): int16;
 getter32ty = method(): int32;
 getter64ty = method(): int64;
 
procedure getordprop(const instance: tbase;
                                 const propinfo: ppropertyrttity): int64;
var
 p1: pointer;
 m1: methodty;
begin
 with propinfo^:a,a.proptype^:b do
  if not (b.kind in ordinalkinds) then
   rttierror(snoordprop,[string8(a.name),
                         getenumname(typeinfo(b.kind),ord(b.kind))]);
  else   
   case getpropreadad(instance,propinfo,p1) of
    pa_field:
     case b.size of
      bs_8:
       result:= pint8(p1)^;
      bs_16:
       result:= pint16(p1)^;
      bs_32:
       result:= pint32(p1)^;
      bs_64:
       result:= pint64(p1)^;
      else:
       rttierror(sinvalidpropertysize,
                [string8(a.name),getenumname(typeinfo(b.size),ord(b.size))]);
     end;
    pa_method:
     m1.data:= instance;
     m1.code:= p1;
     case b.size of
      bs_8:
       result:= getter8ty(m1)();
      bs_16:
       result:= getter16ty(m1)();
      bs_32:
       result:= getter32ty(m1)();
      bs_64:
       result:= getter64ty(m1)();
      else:
       rttierror(sinvalidpropertysize,
                [string8(a.name),getenumname(typeinfo(b.size),ord(b.size))]);
     end;
    else:
     notimplemented('getordprop()');
   end;
  end;
 end;
end;

procedure getpropinfo(const atypeinfo: pobjectrttity;
                           const propname: string8): ppropertyrttity;
var
 cla: pclassdefty;
 rtti: pobjectrttity;
 p1,pe: ppropertyrttity;
begin
 result:= nil;
 if atypeinfo^.kind <> rtk_object then
  rttierror(stypemustbeobjectorclass);
 end;
 cla:= pobjectrttity(atypeinfo)^.classdef;
 while cla <> nil do
  rtti:= pointer(cla^.header.rtti);
  if rtti = nil then
   exit;
  end;
  p1:= @rtti^.properties.items;
  pe:= pointer(p1)+rtti^.properties.size;
  while p1 < pe do
   if stringicomp(string8(p1^.name),propname) = 0 then
    result:= p1;
    exit;
   end;
   inc(p1);
  end;
  cla:= cla^.header.parentclass;
 end;
end;

procedure getpropinfo(const instance: tbase;
                           const propname: string8): ppropertyrttity;
begin
 result:= getpropinfo(instance.rtti,propname);
end;

procedure addprops(const rtti: pobjectrttity;
                            var props: propertyrttiarty; var count: int32);
var
 p1: pobjectrttity;
 p2,pe: ppropertyrttity;
 p3: ppointer;
 classdef1: pclassdefty;
 i1: int32;
begin
 classdef1:= rtti^.classdef^.header.parentclass;
 if classdef1 <> nil then
  p1:= classdef1^.header.rtti;
  if p1 <> nil then
   addprops(p1,props,count);
  end;
 end;
 i1:= count;
 count:= count + rtti^.properties.size div sizeof(propertyrttity);
 if count > length(props) then
  setlength(props,2*count);
 end;
 p3:= @props[i1];
 p2:= @rtti^.properties.items;
 pe:= pointer(p2) + rtti^.properties.size;
 while p2 < pe do
  p3^:= p2;
  inc(p3);
  inc(p2);
 end;
end;

procedure getproperties(const atypeinfo: pobjectrttity): propertyrttiarty;
var
 i1: int32;
begin
 if atypeinfo = nil then
  result:= nil;
 else
  setlength(result,1);
  i1:= 0;
  addprops(atypeinfo,result,i1);
  setlength(result,i1);
 end;
end;

procedure getproperties(const instance: tbase): propertyrttiarty;
begin
 result:= getproperties(instance.rtti);
end;

procedure isstoredprop(const instance: tbase; 
                           const propinfo: ppropertyrttity): boolean;
begin
 result:= propinfo^.name <> nil;
end;

end.
