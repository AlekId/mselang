//rtl_rttiutils
{ MSElang Copyright (c) 2018 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}
unit rtl_rttiutils;
interface
uses
 rtl_base,__mla__internaltypes;
type
 pppropertyrttity = ^ppropertyrttity;
 propertyrttiarty = array of ppropertyrttity;

procedure getenumname(const typ: prttity; const value: int32): string8;

procedure getordprop(const instance: Cbase;
                                 const propinfo: ppropertyrttity): int64;
procedure setordprop(const instance: Cbase;
                         const propinfo: ppropertyrttity; const value: int64);
procedure getbytestringprop(const instance: Cbase;
                             const propinfo: ppropertyrttity): bytestring;
procedure setbytestringprop(const instance: Cbase;
                  const propinfo: ppropertyrttity; const value: bytestring);
procedure getstring8prop(const instance: Cbase;
                                const propinfo: ppropertyrttity): string8;
procedure setstring8prop(const instance: Cbase;
                  const propinfo: ppropertyrttity; const value: string8);
procedure getstring16prop(const instance: Cbase;
                                const propinfo: ppropertyrttity): string16;
procedure setstring16prop(const instance: Cbase;
                  const propinfo: ppropertyrttity; const value: string16);
procedure getstring32prop(const instance: Cbase;
                                const propinfo: ppropertyrttity): string32;
procedure setstring32prop(const instance: Cbase;
                  const propinfo: ppropertyrttity; const value: string32);

procedure getpropinfo(const atypeinfo: pobjectrttity;
                           const propname: string8): ppropertyrttity;
procedure getpropinfo(const instance: Cbase;
                           const propname: string8): ppropertyrttity;
procedure getproperties(const instance: Cbase): propertyrttiarty;
procedure getproperties(const atypeinfo: pobjectrttity): propertyrttiarty;

procedure isstoredprop(const instance: Cbase; 
                           const propinfo: ppropertyrttity): boolean;
implementation
uses
 rtl_sysexceptions,rtl_sysconsts,rtl_strings,__mla__compilerunit,
 rtl_format;

procedure rttierror(const amessage: string8);
begin
 raise erttierror.create(srttierror+':'+lineend+amessage);
end;

procedure rttierror(const amessage: string8; const values: array of const);
begin
 raise erttierror.create(srttierror+':'+lineend+format(amessage,values));
end;

procedure getenumname(const typ: prttity; const value: int32): string8;
begin
 if typ^.kind <> rtk_enum then
  rttierror(senumtypeexpected);
 end;
 result:= __mla__getenumname(pointer(typ),value);
end;
 
type
 propertyaccessty = (pa_none,pa_field,pa_method,
                     pa_methodconst); //const value parameter

procedure notimplemented(const atext: string8);
begin
 raise enotimplemented.create(atext);
end;

procedure getpropreadad(const instance: Cbase; const propinfo: ppropertyrttity;
                   out po: methodty): propertyaccessty;
begin
 result:= pa_none;
 if prf_readfield in propinfo^.flags then
  result:= pa_field;
  po.data:= pointer(instance)+propinfo^.readaccess.fieldoffset;
 else
  if prf_readproc in propinfo^.flags then
   result:= pa_method;
   po.data:= instance;
   if prf_virtualread in propinfo^.flags then
    po.code:= (ppointer(@ppclassdefty(instance)^^.virtualmethods) + 
                                             propinfo^.readaccess.tableindex)^;
   else
    po.code:= propinfo^.readaccess.accessproc;
   end;
  end;
 end;
end;

procedure getpropwritead(const instance: Cbase; const propinfo: ppropertyrttity;
                   out po: methodty): propertyaccessty;
begin
 result:= pa_none;
 if prf_writefield in propinfo^.flags then
  result:= pa_field;
  po.data:= pointer(instance)+propinfo^.readaccess.fieldoffset;
 else
  if prf_writeproc in propinfo^.flags then
   if prf_writeprocconst in propinfo^.flags then
    result:= pa_methodconst;
   else
    result:= pa_method;
   end;
   po.data:= instance;
   if prf_virtualread in propinfo^.flags then
    po.code:= (ppointer(@ppclassdefty(instance)^^.virtualmethods) + 
                                             propinfo^.writeaccess.tableindex)^;
   else
    po.code:= propinfo^.writeaccess.accessproc;
   end;
  end;
 end;
end;

type
 getter8ty = method(): int8;
 getter16ty = method(): int16;
 getter32ty = method(): int32;
 getter64ty = method(): int64;
 getterpoty = method(): pointer;
 
 setter8ty = method(avalue: int8);
 setter16ty = method(avalue: int16);
 setter32ty = method(avalue: int32);
 setter64ty = method(avalue: int64);
 setterpoty = method(avalue: pointer);

 setterc8ty = method(const avalue: int8);
 setterc16ty = method(const avalue: int16);
 setterc32ty = method(const avalue: int32);
 setterc64ty = method(const avalue: int64);
 settercpoty = method(const avalue: pointer);
 
 setterbytestringty = method(avalue: bytestring);
 setterstring8ty = method(avalue: string8);
 setterstring16ty = method(avalue: string16);
 setterstring32ty = method(avalue: string32);

 settercbytestringty = method(const avalue: bytestring);
 settercstring8ty = method(const avalue: string8);
 settercstring16ty = method(const avalue: string16);
 settercstring32ty = method(const avalue: string32);

 
procedure getordprop(const instance: Cbase;
                                 const propinfo: ppropertyrttity): int64;
var
 m1: methodty;
begin
 with propinfo^:a,a.proptype^:b do
  if not (b.kind in ordinalkinds) then
   rttierror(snoordprop,[string8(a.name),
                         getenumname(typeinfo(b.kind),ord(b.kind))]);
  else   
   case getpropreadad(instance,propinfo,m1) of
    pa_field:
     case b.datasize of
      bs_8:
       result:= pint8(m1.data)^;
      bs_16:
       result:= pint16(m1.data)^;
      bs_32:
       result:= pint32(m1.data)^;
      bs_64:
       result:= pint64(m1.data)^;
      else:
       rttierror(sinvalidpropertysize,
                [string8(a.name),getenumname(typeinfo(b.size),ord(b.size))]);
     end;
    pa_method:
     case b.datasize of
      bs_8:
       result:= getter8ty(m1)();
      bs_16:
       result:= getter16ty(m1)();
      bs_32:
       result:= getter32ty(m1)();
      bs_64:
       result:= getter64ty(m1)();
      else:
       rttierror(sinvalidpropertysize,
                [string8(a.name),getenumname(typeinfo(b.size),ord(b.size))]);
     end;
    else:
     notimplemented('getordprop()');
   end;
  end;
 end;
end;

procedure setordprop(const instance: Cbase;
                         const propinfo: ppropertyrttity; const value: int64);
var
 m1: methodty;
begin
 with propinfo^:a,a.proptype^:b do
  if not (b.kind in ordinalkinds) then
   rttierror(snoordprop,[string8(a.name),
                         getenumname(typeinfo(b.kind),ord(b.kind))]);
  else   
   case getpropwritead(instance,propinfo,m1) of
    pa_field:
     case b.datasize of
      bs_8:
       pint8(m1.data)^:= value;
      bs_16:
       pint16(m1.data)^:= value;
      bs_32:
       pint32(m1.data)^:= value;
      bs_64:
       pint64(m1.data)^:= value;
      else:
       rttierror(sinvalidpropertysize,
                [string8(a.name),getenumname(typeinfo(b.size),ord(b.size))]);
     end;
    pa_method:
     case b.datasize of
      bs_8:
       setter8ty(m1)(value);
      bs_16:
       setter16ty(m1)(value);
      bs_32:
       setter32ty(m1)(value);
      bs_64:
       setter64ty(m1)(value);
      else:
       rttierror(sinvalidpropertysize,
                [string8(a.name),getenumname(typeinfo(b.size),ord(b.size))]);
     end;
    pa_methodconst:
     case b.datasize of
      bs_8:
       setterc8ty(m1)(value);
      bs_16:
       setterc16ty(m1)(value);
      bs_32:
       setterc32ty(m1)(value);
      bs_64:
       setterc64ty(m1)(value);
      else:
       rttierror(sinvalidpropertysize,
                [string8(a.name),getenumname(typeinfo(b.size),ord(b.size))]);
     end;
    else:
     notimplemented('setordprop()');
   end;
  end;
 end;
end;

procedure getbytestringprop(const instance: Cbase;
                             const propinfo: ppropertyrttity): bytestring;
var
 s1: bytestring;
 m1: methodty;
begin
 with propinfo^:a,pstringrttity(a.proptype)^:b do
  if b.kind <> rtk_string then
   rttierror(snostringprop,[string8(a.name),
                         getenumname(typeinfo(b.kind),ord(b.kind))]);
  else
   if b.stringkind = stk_byte then
    case getpropreadad(instance,propinfo,m1) of
     pa_field:
      result:= pbytestring(m1.data)^;
     pa_method:
      pointer(s1):= getterpoty(m1)();
      incref(s1);
      result:= s1;
    end;
   else
    rttierror(swrongstringkind,
                [string8(a.name),
                 getenumname(typeinfo(b.stringkind),ord(b.stringkind)),
                 'stk_byte']);
   end;
  end;
 end;
end;

procedure setbytestringprop(const instance: Cbase;
                  const propinfo: ppropertyrttity; const value: bytestring);
var
 m1: methodty;
begin
 with propinfo^:a,pstringrttity(a.proptype)^:b do
  if b.kind <> rtk_string then
   rttierror(snostringprop,[string8(a.name),
                         getenumname(typeinfo(b.kind),ord(b.kind))]);
  else
   if b.stringkind = stk_byte then
    case getpropwritead(instance,propinfo,m1) of
     pa_field:
      pbytestring(m1.data)^:= value;
     pa_method:
      setterbytestringty(m1)(value);
     pa_methodconst:
      settercbytestringty(m1)(value);
    end;
   else
    rttierror(swrongstringkind,
                [string8(a.name),
                 getenumname(typeinfo(b.stringkind),ord(b.stringkind)),
                 'stk_byte']);
   end;
  end;
 end;
end;

procedure getstring8prop(const instance: Cbase;
                                const propinfo: ppropertyrttity): string8;
var
 s1: string8;
 m1: methodty;
begin
 with propinfo^:a,pstringrttity(a.proptype)^:b do
  if b.kind <> rtk_string then
   rttierror(snostringprop,[string8(a.name),
                         getenumname(typeinfo(b.kind),ord(b.kind))]);
  else
   if b.stringkind = stk_8 then
    case getpropreadad(instance,propinfo,m1) of
     pa_field:
      result:= pstring8(m1.data)^;
     pa_method:
      pointer(s1):= getterpoty(m1)();
      incref(s1);
      result:= s1;
    end;
   else
    rttierror(swrongstringkind,
                [string8(a.name),
                 getenumname(typeinfo(b.stringkind),ord(b.stringkind)),
                 'stk_8']);
   end;
  end;
 end;
end;

procedure setstring8prop(const instance: Cbase;
                  const propinfo: ppropertyrttity; const value: string8);
var
 m1: methodty;
begin
 with propinfo^:a,pstringrttity(a.proptype)^:b do
  if b.kind <> rtk_string then
   rttierror(snostringprop,[string8(a.name),
                         getenumname(typeinfo(b.kind),ord(b.kind))]);
  else
   if b.stringkind = stk_8 then
    case getpropwritead(instance,propinfo,m1) of
     pa_field:
      pstring8(m1.data)^:= value;
     pa_method:
      setterstring8ty(m1)(value);
     pa_methodconst:
      settercstring8ty(m1)(value);
    end;
   else
    rttierror(swrongstringkind,
                [string8(a.name),
                 getenumname(typeinfo(b.stringkind),ord(b.stringkind)),
                 'stk_8']);
   end;
  end;
 end;
end;

procedure getstring16prop(const instance: Cbase;
                                const propinfo: ppropertyrttity): string16;
var
 s1: string16;
 m1: methodty;
begin
 with propinfo^:a,pstringrttity(a.proptype)^:b do
  if b.kind <> rtk_string then
   rttierror(snostringprop,[string8(a.name),
                         getenumname(typeinfo(b.kind),ord(b.kind))]);
  else
   if b.stringkind = stk_16 then
    case getpropreadad(instance,propinfo,m1) of
     pa_field:
      result:= pstring16(m1.data)^;
     pa_method:
      pointer(s1):= getterpoty(m1)();
      incref(s1);
      result:= s1;
    end;
   else
    rttierror(swrongstringkind,
                [string8(a.name),
                 getenumname(typeinfo(b.stringkind),ord(b.stringkind)),
                 'stk_16']);
   end;
  end;
 end;
end;

procedure setstring16prop(const instance: Cbase;
                  const propinfo: ppropertyrttity; const value: string16);
var
 m1: methodty;
begin
 with propinfo^:a,pstringrttity(a.proptype)^:b do
  if b.kind <> rtk_string then
   rttierror(snostringprop,[string8(a.name),
                         getenumname(typeinfo(b.kind),ord(b.kind))]);
  else
   if b.stringkind = stk_16 then
    case getpropwritead(instance,propinfo,m1) of
     pa_field:
      pstring16(m1.data)^:= value;
     pa_method:
      setterstring16ty(m1)(value);
     pa_methodconst:
      settercstring16ty(m1)(value);
    end;
   else
    rttierror(swrongstringkind,
                [string8(a.name),
                 getenumname(typeinfo(b.stringkind),ord(b.stringkind)),
                 'stk_16']);
   end;
  end;
 end;
end;

procedure getstring32prop(const instance: Cbase;
                                const propinfo: ppropertyrttity): string32;
var
 s1: string32;
 m1: methodty;
begin
 with propinfo^:a,pstringrttity(a.proptype)^:b do
  if b.kind <> rtk_string then
   rttierror(snostringprop,[string8(a.name),
                         getenumname(typeinfo(b.kind),ord(b.kind))]);
  else
   if b.stringkind = stk_32 then
    case getpropreadad(instance,propinfo,m1) of
     pa_field:
      result:= pstring16(m1.data)^;
     pa_method:
      pointer(s1):= getterpoty(m1)();
      incref(s1);
      result:= s1;
    end;
   else
    rttierror(swrongstringkind,
                [string8(a.name),
                 getenumname(typeinfo(b.stringkind),ord(b.stringkind)),
                 'stk_32']);
   end;
  end;
 end;
end;

procedure setstring32prop(const instance: Cbase;
                  const propinfo: ppropertyrttity; const value: string32);
var
 m1: methodty;
begin
 with propinfo^:a,pstringrttity(a.proptype)^:b do
  if b.kind <> rtk_string then
   rttierror(snostringprop,[string8(a.name),
                         getenumname(typeinfo(b.kind),ord(b.kind))]);
  else
   if b.stringkind = stk_32 then
    case getpropwritead(instance,propinfo,m1) of
     pa_field:
      pstring32(m1.data)^:= value;
     pa_method:
      setterstring32ty(m1)(value);
     pa_methodconst:
      settercstring32ty(m1)(value);
    end;
   else
    rttierror(swrongstringkind,
                [string8(a.name),
                 getenumname(typeinfo(b.stringkind),ord(b.stringkind)),
                 'stk_32']);
   end;
  end;
 end;
end;

procedure getpropinfo(const atypeinfo: pobjectrttity;
                           const propname: string8): ppropertyrttity;
var
 cla: pclassdefty;
 rtti: pobjectrttity;
 p1,pe: ppropertyrttity;
begin
 result:= nil;
 if atypeinfo <> nil then
  if atypeinfo^.kind <> rtk_object then
   rttierror(stypemustbeobjectorclass);
  end;
  cla:= pobjectrttity(atypeinfo)^.classdef;
  while cla <> nil do
   rtti:= pointer(cla^.header.rtti);
   if rtti = nil then
    exit;
   end;
   p1:= @rtti^.properties.items;
   pe:= pointer(p1)+rtti^.properties.size;
   while p1 < pe do
    if stringicomp(string8(p1^.name),propname) = 0 then
     result:= p1;
     exit;
    end;
    inc(p1);
   end;
   cla:= cla^.header.parentclass;
  end;
 end;
end;

procedure getpropinfo(const instance: Cbase;
                           const propname: string8): ppropertyrttity;
begin
 result:= getpropinfo(instance.rtti,propname);
end;

procedure addprops(const rtti: pobjectrttity;
                            var props: propertyrttiarty; var count: int32);
var
 p1: pobjectrttity;
 p2,pe: ppropertyrttity;
 p3: ppointer;
 classdef1: pclassdefty;
 i1: int32;
begin
 classdef1:= rtti^.classdef^.header.parentclass;
 if classdef1 <> nil then
  p1:= classdef1^.header.rtti;
  if p1 <> nil then
   addprops(p1,props,count);
  end;
 end;
 i1:= count;
 count:= count + rtti^.properties.size div sizeof(propertyrttity);
 if count > length(props) then
  setlength(props,2*count);
 end;
 p3:= @props[i1];
 p2:= @rtti^.properties.items;
 pe:= pointer(p2) + rtti^.properties.size;
 while p2 < pe do
  p3^:= p2;
  inc(p3);
  inc(p2);
 end;
end;

procedure getproperties(const atypeinfo: pobjectrttity): propertyrttiarty;
var
 i1: int32;
begin
 if atypeinfo = nil then
  result:= nil;
 else
  setlength(result,1);
  i1:= 0;
  addprops(atypeinfo,result,i1);
  setlength(result,i1);
 end;
end;

procedure getproperties(const instance: Cbase): propertyrttiarty;
begin
 result:= getproperties(instance.rtti);
end;

procedure isstoredprop(const instance: Cbase; 
                           const propinfo: ppropertyrttity): boolean;
begin
 result:= propinfo^.name <> nil;
end;

end.
