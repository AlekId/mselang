//rtl_rttiutils
{ MSElang Copyright (c) 2018 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}
unit rtl_rttiutils;
interface
uses
 rtl_base,__mla__internaltypes;

procedure getordprop(const instance: tbase;
                                 const propinfo: ppropertyrttity): int64;
procedure getpropinfo(const atypeinfo: prttity;
                           const propname: string8): ppropertyrttity;
procedure getpropinfo(const instance: tbase;
                           const propname: string8): ppropertyrttity;

implementation
uses
 rtl_sysexceptions,rtl_sysconsts,rtl_string;
 
type
 propertyaccessty = (pa_field,pa_proc);

procedure notimplemented(const atext: string8);
begin
 raise enotimplemented.create(atext);
end;

procedure rttierror(const atext: string8);
begin
 raise ertti.create(atext);
end;

procedure getpropreadad(const instance: tbase; const propinfo: ppropertyrttity;
                   out po: pointer): propertyaccessty;
begin
 result:= pa_proc;
end;

procedure getordprop(const instance: tbase;
                                 const propinfo: ppropertyrttity): int64;
var
 p1: pointer;
begin
 case getpropreadad(instance,propinfo,p1) of
  pa_field:
   result:= pint64(p1)^;
  else:
   notimplemented('getordprop()');
 end;
end;

procedure getpropinfo(const atypeinfo: prttity;
                           const propname: string8): ppropertyrttity;
var
 cla: pclassdefty;
 rtti: pobjectrttity;
 p1,pe: ppropertyrttity;
begin
 result:= nil;
 if atypeinfo^.kind <> rtk_object then
  rttierror(stypemustbeobjectorclass);
 end;
 cla:= pobjectrttity(atypeinfo)^.classdef;
 while cla <> nil do
  rtti:= pointer(cla^.header.rtti);
  if rtti = nil then
   exit;
  end;
  p1:= @rtti^.properties.items;
  pe:= pointer(p1)+rtti^.properties.size;
  while p1 < pe do
   if stringicomp(string8(p1^.name),propname) = 0 then
    result:= p1;
    exit;
   end;
   inc(p1);
  end;
  cla:= cla^.header.parentclass;
 end;
end;

procedure getpropinfo(const instance: tbase;
                           const propname: string8): ppropertyrttity;
begin
 result:= getpropinfo(typeinfo(classof(instance)),propname);
end;

end.
