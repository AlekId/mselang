//rtl_streaming
{ MSEgui Copyright (c) 2018 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}

unit rtl_streaming;
interface
uses
 rtl_base,rtl_fpccompatibility,__mla__internaltypes,rtl_streams,
 rtl_sysexceptions;
//{$internaldebug on}
type
 tpersistent = class;

 efilererror = class(exception) end;
 ereadererror = class(efilererror) end;
 ewritererror = class(ereadererror) end;

 valuety = (va_none,va_null,va_list,
            va_int1,va_int8,va_int16,va_int32,va_int64,
            va_strl1,va_strl2,va_strl4 //size of length value
           );

 filerstatety = (fis_nextvaluevalid);
 filerstatesty = set of filerstatety;
  
 Tfiler = class(Tobject)
  constructor create(const astream: tstream);
  class method iswriter(): boolean [virtual];
  protected
   fstate: filerstatesty;
   fstreamx: tstream;
 end;

 Treader = class(Tfiler)
  method read(var buffer; const count: int32);
  method nextvalue(): valuety; //peek current value type

  method readstr(): string8;
  method readvalue(): valuety;
  method readint32(): int32;
  method readint64(): int64;
  method readbytestring(): bytestring;
  method readstring8(): string8;
  method readstring16(): string8;
  method readstring32(): string8;
  method readproperty(const instance: tpersistent);
  method skipvalue();
  protected
   fnextvalue: valuety;
   method propertyerror(const aname: string8);
 end;
 
 Twriter = class(Tfiler)
  class method iswriter(): boolean [override];
  method write(const buffer; const count: int32);

  method writevalue(const avalue: valuety);
  method writestr(const avalue: string8); //length truncated to 255 chars

  method writeinteger(const avalue: int32);
  method writeinteger(const avalue: int64);
  method writebytestring(const avalue: bytestring);
  method writestring8(const avalue: string8);
  method writestring16(const avalue: string16);
  method writestring32(const avalue: string32);

  method writeproperties(const instance: Tpersistent);
  method writeproperty(const instance: Tpersistent;
                                     const propinfo: ppropertyrttity);

 end;

 Tpersistent = class(Tobject)
  method assign(source: Tpersistent) [virtual];
  method getnamepath(): string8 [virtual];

  protected
   method assignerror(const source: Tpersistent);
   method assignto(dest: Tpersistent) [virtual];
   method defineproperties(filer: Tfiler) [virtual];
   method getowner(): Tpersistent [virtual];
 end;

 componentlistty = object
  private
   fcount: int32;
 end;
 
 Ccomponents = class(Cbase)
  private
   fcomponents: componentlistty;
 end;
 
 tcomponent = class(Tpersistent)
  constructor create(aowner: tcomponent) [virtual];
  destructor destroy() [override];
  property name: string8 read fname write setname;
  property owner: tcomponent read fowner write setowner;
  method componentcount(): int32;
  private
   fowner: tcomponent;
   fcomponents: Ccomponents;
   fname: string8;
   method setname(const avalue: string8);
   method setowner(const avalue: tcomponent);
 end;

implementation
uses
 rtl_rtlconsts,rtl_classutils,rtl_sysexceptions,rtl_rttiutils,rtl_format,
 rtl_system;
 
procedure writererror(const amessage: string8);
begin
 raise ewritererror.create(amessage);
end;

procedure writererror(const amessage: string8; const avalues: array of const);
begin
 raise ewritererror.create(format(amessage,avalues));
end;

procedure readererror(const amessage: string8);
begin
 raise ereadererror.create(amessage);
end;

procedure readererror(const amessage: string8; const avalues: array of const);
begin
 raise ereadererror.create(format(amessage,avalues));
end;

procedure invalidpropertyvalue(const avalue: valuety);
begin
 readererror(sinvalidpropvalue,[getenumname(typeinfo(avalue),ord(avalue))]);
end;

procedure invalidpropertytype(const avalue: rttikindty);
begin
 readererror(sinvalidproptype,[getenumname(typeinfo(avalue),ord(avalue))]);
end;

{ Tpersistent }

method Tpersistent.assignerror(const source: Tpersistent);
begin
 raise econverterror.createfmt(sassignerror,[getclassname(source),classname]);
end;

method Tpersistent.assignto(dest: Tpersistent);
begin
 notimplementederror('Tpersistent.assignto');
end;

method Tpersistent.defineproperties(filer: Tfiler);
begin
 notimplementederror('Tpersistent.defineproperties');
end;

method Tpersistent.getowner(): Tpersistent;
begin
 notimplementederror('Tpersistent.getowner');
end;

method Tpersistent.assign(source: Tpersistent);
begin
 notimplementederror('Tpersistent.assign');
end;

method Tpersistent.getnamepath(): string8;
begin
 notimplementederror('Tpersistent.getnamepath');
end;

{ tcomponent }

constructor tcomponent.create(aowner: tcomponent);
begin
end;

destructor tcomponent.destroy();
begin
 inherited;
end;

method tcomponent.componentcount(): int32;
begin
 result:= 0;
 if fcomponents <> nil then
  result:= fcomponents.fcomponents.fcount;
 end;
end;

method tcomponent.setname(const avalue: string8);
begin
 fname:= avalue;
end;

method tcomponent.setowner(const avalue: tcomponent);
begin
 fowner:= avalue;
end;

{ Tfiler }

constructor Tfiler.create(const astream: tstream);
begin
 fstreamx:= astream;
end;

class method Tfiler.iswriter(): boolean;
begin
 result:= false;
end;

{ Twriter }

class method Twriter.iswriter(): boolean;
begin
 result:= true;
end;

method Twriter.write(const buffer; const count: int32);
begin
 fstreamx.writebuffer(buffer,count);
end;

method Twriter.writevalue(const avalue: valuety);
var
 c1: card8;
begin
 c1:= card8(card32(avalue));
 write(c1,1);
end;

method Twriter.writestr(const avalue: string8);
var
 i1: int32;
 ca1: card8;
begin
 i1:= length(avalue);
 if i1 > $ff then
  i1:= $ff;
 end;
 ca1:= i1;
 write(ca1,1);
 if avalue <> '' then
  write(pointer(avalue)^,i1);
 end;
end;

method Twriter.writeinteger(const avalue: int32);
var
 i8: int8;
 i16: int16;
begin
 if (avalue >= -$80) and (avalue < $80) then
  writevalue(va_int8);
  i8:= avalue;
  write(i8,1);
 else
  if (avalue >= -$8000) and (avalue < $8000) then
   writevalue(va_int16);
   i16:= avalue;
   write(i16,2);
  else
    writevalue(va_int32);
    write(avalue,4);
  end;
 end;  
end;

method Twriter.writeinteger(const avalue: int64);
begin
 if (avalue >= -$8000) and (avalue < $8000) then
  writeinteger(int32(avalue));
 else
  writevalue(va_int64);
  write(avalue,8);
 end;
end;

method Twriter.writebytestring(const avalue: bytestring);
var
 i1: int32;
 c1: card8;
 c2: card16;
 
begin
 i1:= length(avalue);
 if i1 < $100 then
  writevalue(va_strl1);
  c1:= i1;
  write(c1,sizeof(c1));
 else
  if i1 < $10000 then
   writevalue(va_strl2);
   c2:= i1;
   write(c2,sizeof(c2));
  else
   writevalue(va_strl4);
   write(i1,sizeof(i1));
  end;
 end;
 write(pointer(avalue)^,i1);
end;

method Twriter.writestring8(const avalue: string8);
begin
 writebytestring(bytestring(pointer(avalue)));
end;

method Twriter.writestring16(const avalue: string16);
begin
 writestring8(string8(avalue));
end;

method Twriter.writestring32(const avalue: string32);
begin
 writestring8(string8(avalue));
end;

method Twriter.writeproperty(const instance: Tpersistent;
               const propinfo: ppropertyrttity);
var
 k1: stringkindty;
begin
 if propinfo^.flags * [prf_readfield,prf_readproc] = [] then
  exit; //can not get data for writing
 end;
 writestr(string8(propinfo^.name));
 case propinfo^.proptype^.kind of
  rtk_integer:
   writeinteger(getordprop(instance,propinfo));
  rtk_string:
   k1:= pstringrttity(propinfo^.proptype)^.stringkind;
   case k1 of
    stk_byte:
     writebytestring(getbytestringprop(instance,propinfo));
    stk_8:
     writestring8(getstring8prop(instance,propinfo));
    stk_16:
     writestring16(getstring16prop(instance,propinfo));
    stk_32:
     writestring32(getstring32prop(instance,propinfo));
    else:
     writererror(sinvalidstringkind,[string8(propinfo^.name),
                                     getenumname(typeinfo(k1),ord(k1))])
   end;
  else:
   writererror(scannotwritepropertykind,[string8(propinfo^.name),
               getenumname(typeinfo(propinfo^.proptype^.kind),
                                          ord(propinfo^.proptype^.kind))]);
 end;
end;

method Twriter.writeproperties(const instance: Tpersistent);
var
 ar1: propertyrttiarty;
 p1,pe: pppropertyrttity;
begin
 ar1:= getproperties(instance);
 p1:= pointer(ar1);
 pe:= p1 + length(ar1);
 while p1 < pe do
  writeproperty(instance,p1^);
  inc(p1);
 end;
end;

{ Treader }

method Treader.read(var buffer; const count: int32);
begin
 fstreamx.readbuffer(buffer,count);
end;

method Treader.nextvalue(): valuety;
begin
 if not fstate[fis_nextvaluevalid] then
  fnextvalue:= readvalue();
  include(fstate,fis_nextvaluevalid);
//  fstate[fis_nextvaluevalid]:= true;
  result:= fnextvalue;
 end;
end;

method Treader.readstr(): string8;
var
 c1: card8;
begin
 read(c1,sizeof(c1));
 setlength(result,c1);
 read(pointer(result)^,c1);
end;

method Treader.readvalue(): valuety;
var
 c1: card8;
begin
 read(c1,1);
 result:= valuety(ord(c1));
end;

method Treader.readint32(): int32;
var
 i8: int8;
 i16: int16;
 i32: int32;
 v1: valuety;
begin
 v1:= readvalue();
 case v1 of
  va_int8: 
   read(i8,sizeof(i8));
   result:= i8;
  va_int16:
   read(i16,sizeof(i16));
   result:= i16
  va_int32: 
   read(i32,sizeof(i32));
   result:= i32;
  else:
   invalidpropertyvalue(v1);
 end;
end;

method Treader.readint64(): int64;
var
 i8: int8;
 i16: int16;
 i32: int32;
 i64: int32;
 v1: valuety;
begin
 v1:= readvalue();
 case v1 of
  va_int8: 
   read(i8,sizeof(i8));
   result:= i8;
  va_int16:
   read(i16,sizeof(i16));
   result:= i16
  va_int32: 
   read(i32,sizeof(i32));
   result:= i32;
  va_int64: 
   read(i64,sizeof(i64));
   result:= i64;
  else:
   invalidpropertyvalue(v1);
 end;
end;

method Treader.readbytestring(): bytestring;
var
 v1: valuety;
 c8: card8;
 c16: card16;
 i32: int32;
begin
 v1:= readvalue();
 case v1 of
  va_strl1: 
   read(c8,sizeof(c8));
   i32:= c8;
  va_int16:
   read(c16,sizeof(c16));
   i32:= c16;
  va_int32: 
   read(i32,sizeof(i32));
  else:
   invalidpropertyvalue(v1);
 end;
 setlength(result,i32);
 read(pointer(result)^,i32);
end;

method Treader.readstring8(): string8;
begin
 result:= string8(pointer(readbytestring));
end;

method Treader.readstring16(): string8;
begin
 result:= readstring8();
end;

method Treader.readstring32(): string8;
begin
 result:= readstring8();
end;

method Treader.skipvalue();
begin
 notimplementederror('Treader.skipvalue');
end;

method Treader.propertyerror(const aname: string8);
begin
 skipvalue();
 readererror(sunknownproperty,[aname]);
end;

method Treader.readproperty(const instance: Tpersistent);
var
 s1: string8;
 prop1: ppropertyrttity;
 k1: stringkindty;
begin
 try
  s1:= readstr();
  prop1:= getpropinfo(instance,s1); //todo: property path
  if prop1 = nil then
   propertyerror(s1);
  end;
  case prop1^.proptype^.kind of
   rtk_integer:
    setordprop(instance,prop1,readint64());
   rtk_string:
    k1:= pstringrttity(prop1^.proptype)^.stringkind;
    case k1 of
     stk_byte:
      setbytestringprop(instance,prop1,readbytestring());
     stk_8:
      setstring8prop(instance,prop1,readstring8());
     stk_16:
      setstring16prop(instance,prop1,readstring16());
     stk_32:
      setstring32prop(instance,prop1,readstring32());
     else:
      readererror(sinvalidstringkind,[string8(prop1^.name),
                                      getenumname(typeinfo(k1),ord(k1))])
    end;
   else:
    invalidpropertytype(prop1^.proptype^.kind);
  end;
 except
  raise; //todo: error handling
 end;
end;

end.
