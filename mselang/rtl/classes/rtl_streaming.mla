//rtl_streaming
{ MSEgui Copyright (c) 2018 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}

unit rtl_streaming;
interface
uses
 rtl_fpccompatibility,__mla__internaltypes,rtl_streams;
//{$internaldebug on}
type
 tpersistent = class;

 tfiler = class(tobject)
  class method iswriter(): boolean [virtual];
 end;
 
 treader = class(tfiler)
 end;
 
 twriter = class(tfiler)
  class method iswriter(): boolean [override];
  method writeproperties(const instance: tpersistent);
  method writeproperty(const instance: tpersistent;
                                     const propinfo: ppropertyrttity);
  protected
 end;
 
 tpersistent = class(tobject)
  method assign(source: tpersistent) [virtual];
  method getnamepath(): string8 [virtual];
  protected
   method assignerror(const source: tpersistent);
   method assignto(dest: tpersistent) [virtual];
   method defineproperties(filer: tfiler) [virtual];
   method getowner(): tpersistent [virtual];
 end;
 
implementation
uses
 rtl_rtlconsts,rtl_classutils,rtl_sysexceptions,rtl_rttiutils;

{ tpersistent }

method tpersistent.assignerror(const source: tpersistent);
begin
 raise econverterror.createfmt(sassignerror,[getclassname(source),classname]);
end;

method tpersistent.assignto(dest: tpersistent);
begin
end;

method tpersistent.defineproperties(filer: tfiler);
begin
end;

method tpersistent.getowner(): tpersistent;
begin
end;

method tpersistent.assign(source: tpersistent);
begin
end;

method tpersistent.getnamepath(): string8;
begin
end;

{ tfiler }

class method tfiler.iswriter(): boolean;
begin
 result:= false;
end;

{ twriter }

method twriter.writeproperty(const instance: tpersistent;
               const propinfo: ppropertyrttity);
begin
 writeln('* ',string8(propinfo^.name));
end;

method twriter.writeproperties(const instance: tpersistent);
var
 ar1: propertyrttiarty;
 p1,pe: pppropertyrttity;
begin
 ar1:= getproperties(instance);
 p1:= pointer(ar1);
 pe:= p1 + length(ar1);
 while p1 < pe do
  writeproperty(instance,p1^);
  inc(p1);
 end;
end;

class method twriter.iswriter(): boolean;
begin
 result:= true;
end;

end.
