//rtl_stringconv
{ MSElang Copyright (c) 2018 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}
unit rtl_stringconv;
interface
uses
 __mla__internaltypes;
 
procedure string8to16(const source: pchar8; const len: int32): string16;
procedure string8to32(const source: pchar8; const len: int32): string32;
procedure string16to8(const source: pchar16; const len: int32): string8;
procedure string16to32(const source: pchar16; const len: int32): string32;
procedure string32to8(const source: pchar32; const len: int32): string8;
procedure string32to16(const source: pchar32; const len: int32): string16;

procedure inttostr8(const avalue: int32): string8;
procedure inttostr16(const avalue: int32): string16;

const
 lowerchars: array[char] of char = (
  #$00,#$01,#$02,#$03,#$04,#$05,#$06,#$07,#$08,#$09,#$0a,#$0b,#$0c,#$0d,#$0e,#$0f,
  #$10,#$11,#$12,#$13,#$14,#$15,#$16,#$17,#$18,#$19,#$1a,#$1b,#$1c,#$1d,#$1e,#$1f,
  #$20,#$21,#$22,#$23,#$24,#$25,#$26,#$27,#$28,#$29,#$2a,#$2b,#$2c,#$2d,#$2e,#$2f,
  #$30,#$31,#$32,#$33,#$34,#$35,#$36,#$37,#$38,#$39,#$3a,#$3b,#$3c,#$3d,#$3e,#$3f,
  #$40,'a' ,'b' ,'c' ,'d' ,'e' ,'f' ,'g' ,'h' ,'i' ,'j' ,'k' ,'l' ,'m' ,'n' ,'o' ,
  'p' ,'q' ,'r' ,'s' ,'t' ,'u' ,'v' ,'w' ,'x' ,'y' ,'z' ,#$5b,#$5c,#$5d,#$5e,#$5f,
  #$60,#$61,#$62,#$63,#$64,#$65,#$66,#$67,#$68,#$69,#$6a,#$6b,#$6c,#$6d,#$6e,#$6f,
  #$70,#$71,#$72,#$73,#$74,#$75,#$76,#$77,#$78,#$79,#$7a,#$7b,#$7c,#$7d,#$7e,#$7f,
  #$80,#$81,#$82,#$83,#$84,#$85,#$86,#$87,#$88,#$89,#$8a,#$8b,#$8c,#$8d,#$8e,#$8f,
  #$90,#$91,#$92,#$93,#$94,#$95,#$96,#$97,#$98,#$99,#$9a,#$9b,#$9c,#$9d,#$9e,#$9f,
  #$a0,#$a1,#$a2,#$a3,#$a4,#$a5,#$a6,#$a7,#$a8,#$a9,#$aa,#$ab,#$ac,#$ad,#$ae,#$af,
  #$b0,#$b1,#$b2,#$b3,#$b4,#$b5,#$b6,#$b7,#$b8,#$b9,#$ba,#$bb,#$bc,#$bd,#$be,#$bf,
  #$c0,#$c1,#$c2,#$c3,#$c4,#$c5,#$c6,#$c7,#$c8,#$c9,#$ca,#$cb,#$cc,#$cd,#$ce,#$cf,
  #$d0,#$d1,#$d2,#$d3,#$d4,#$d5,#$d6,#$d7,#$d8,#$d9,#$da,#$db,#$dc,#$dd,#$de,#$df,
  #$e0,#$e1,#$e2,#$e3,#$e4,#$e5,#$e6,#$e7,#$e8,#$e9,#$ea,#$eb,#$ec,#$ed,#$ee,#$ef,
  #$f0,#$f1,#$f2,#$f3,#$f4,#$f5,#$f6,#$f7,#$f8,#$f9,#$fa,#$fb,#$fc,#$fd,#$fe,#$ff);

 upperchars: array[char] of char = (
  #$00,#$01,#$02,#$03,#$04,#$05,#$06,#$07,#$08,#$09,#$0a,#$0b,#$0c,#$0d,#$0e,#$0f,
  #$10,#$11,#$12,#$13,#$14,#$15,#$16,#$17,#$18,#$19,#$1a,#$1b,#$1c,#$1d,#$1e,#$1f,
  #$20,#$21,#$22,#$23,#$24,#$25,#$26,#$27,#$28,#$29,#$2a,#$2b,#$2c,#$2d,#$2e,#$2f,
  #$30,#$31,#$32,#$33,#$34,#$35,#$36,#$37,#$38,#$39,#$3a,#$3b,#$3c,#$3d,#$3e,#$3f,
  #$40,#$41,#$42,#$43,#$44,#$45,#$46,#$47,#$48,#$49,#$4a,#$4b,#$4c,#$4d,#$4e,#$4f,
  #$50,#$51,#$52,#$53,#$54,#$55,#$56,#$57,#$58,#$59,#$5a,#$5b,#$5c,#$5d,#$5e,#$5f,
  #$60,'A' ,'B' ,'C' ,'D' ,'E' ,'F' ,'G' ,'H' ,'I' ,'J' ,'K' ,'L' ,'M' ,'N' ,'O' ,
  'P' ,'Q' ,'R' ,'S' ,'T' ,'U' ,'V' ,'W' ,'X' ,'Y' ,'Z' ,#$7b,#$7c,#$7d,#$7e,#$7f,
  #$80,#$81,#$82,#$83,#$84,#$85,#$86,#$87,#$88,#$89,#$8a,#$8b,#$8c,#$8d,#$8e,#$8f,
  #$90,#$91,#$92,#$93,#$94,#$95,#$96,#$97,#$98,#$99,#$9a,#$9b,#$9c,#$9d,#$9e,#$9f,
  #$a0,#$a1,#$a2,#$a3,#$a4,#$a5,#$a6,#$a7,#$a8,#$a9,#$aa,#$ab,#$ac,#$ad,#$ae,#$af,
  #$b0,#$b1,#$b2,#$b3,#$b4,#$b5,#$b6,#$b7,#$b8,#$b9,#$ba,#$bb,#$bc,#$bd,#$be,#$bf,
  #$c0,#$c1,#$c2,#$c3,#$c4,#$c5,#$c6,#$c7,#$c8,#$c9,#$ca,#$cb,#$cc,#$cd,#$ce,#$cf,
  #$d0,#$d1,#$d2,#$d3,#$d4,#$d5,#$d6,#$d7,#$d8,#$d9,#$da,#$db,#$dc,#$dd,#$de,#$df,
  #$e0,#$e1,#$e2,#$e3,#$e4,#$e5,#$e6,#$e7,#$e8,#$e9,#$ea,#$eb,#$ec,#$ed,#$ee,#$ef,
  #$f0,#$f1,#$f2,#$f3,#$f4,#$f5,#$f6,#$f7,#$f8,#$f9,#$fa,#$fb,#$fc,#$fd,#$fe,#$ff);

implementation
uses
 __mla__compilerunit;
 
procedure string8to16(const source: pchar8; const len: int32): string16;
begin
 result:= '';
 pointer(result):= __mla__string8to16a(pointer(source),len);
end;

procedure string8to32(const source: pchar8; const len: int32): string32;
begin
 result:= '';
 pointer(result):= __mla__string8to32a(pointer(source),len);
end;

procedure string16to8(const source: pchar16; const len: int32): string8;
begin
 result:= '';
 pointer(result):= __mla__string16to8a(pointer(source),len);
end;

procedure string16to32(const source: pchar16; const len: int32): string32;
begin
 result:= '';
 pointer(result):= __mla__string16to32a(pointer(source),len);
end;

procedure string32to8(const source: pchar32; const len: int32): string8;
begin
 result:= '';
 pointer(result):= __mla__string32to8a(pointer(source),len);
end;

procedure string32to16(const source: pchar32; const len: int32): string16;
begin
 result:= '';
 pointer(result):= __mla__string32to16a(pointer(source),len);
end;

procedure inttostr8(const avalue: int32): string8;
var
 buffer: array[0..22] of char8;
 i1,i2: int32;
 ca1,ca2: card32;
begin
 ca1:= abs(avalue);
 if ca1 = 0 then
  result:= '0';
  exit;
 end;
 i1:= high(buffer);
 while ca1 > 0 do
  ca2:= ca1 div 10;
  buffer[i1]:= char8(card8(ca1 - ca2 * 10 + ord('0')));
  ca1:= ca2;
  dec(i1);
 end;
 if avalue < 0 then
  buffer[i1]:= '-';
  dec(i1);
 end;
 i2:= (high(buffer))-i1;
 setlength(result,i2);
 memcpy(pointer(result),@buffer[i1+1],i2*sizeof(char8));
end;

procedure inttostr16(const avalue: int32): string16;
var
 buffer: array[0..22] of char16;
 i1,i2: int32;
 ca1,ca2: card32;
begin
 ca1:= abs(avalue);
 if ca1 = 0 then
  result:= '0';
  exit;
 end;
 i1:= high(buffer);
 while ca1 > 0 do
  ca2:= ca1 div 10;
  buffer[i1]:= char16(card16(ca1 - ca2 * 10 + ord('0')));
  ca1:= ca2;
  dec(i1);
 end;
 if avalue < 0 then
  buffer[i1]:= '-';
  dec(i1);
 end;
 i2:= (high(buffer))-i1;
 setlength(result,i2);
 memcpy(pointer(result),@buffer[i1+1],i2*sizeof(char16));
end;

end.
