//rtl_format
{ MSEgui Copyright (c) 2018 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}
unit rtl_format;
interface
uses
 __mla__internaltypes;

procedure string8to16(const source: pchar8; const len: int32): string16;
procedure string8to32(const source: pchar8; const len: int32): string32;
procedure string16to8(const source: pchar16; const len: int32): string8;
procedure string16to32(const source: pchar16; const len: int32): string32;
procedure string32to8(const source: pchar32; const len: int32): string8; 
procedure string32to16(const source: pchar32; const len: int32): string16; 

procedure format(const fmt: string8; const args: array of const): string8;

implementation
uses
 __mla__compilerunit,rtl_flotostr,rtl_sysexceptions,rtl_sysconsts;
 
const
 lowerchars: array[char] of char = (
  #$00,#$01,#$02,#$03,#$04,#$05,#$06,#$07,#$08,#$09,#$0a,#$0b,#$0c,#$0d,#$0e,#$0f,
  #$10,#$11,#$12,#$13,#$14,#$15,#$16,#$17,#$18,#$19,#$1a,#$1b,#$1c,#$1d,#$1e,#$1f,
  #$20,#$21,#$22,#$23,#$24,#$25,#$26,#$27,#$28,#$29,#$2a,#$2b,#$2c,#$2d,#$2e,#$2f,
  #$30,#$31,#$32,#$33,#$34,#$35,#$36,#$37,#$38,#$39,#$3a,#$3b,#$3c,#$3d,#$3e,#$3f,
  #$40,'a' ,'b' ,'c' ,'d' ,'e' ,'f' ,'g' ,'h' ,'i' ,'j' ,'k' ,'l' ,'m' ,'n' ,'o' ,
  'p' ,'q' ,'r' ,'s' ,'t' ,'u' ,'v' ,'w' ,'x' ,'y' ,'z' ,#$5b,#$5c,#$5d,#$5e,#$5f,
  #$60,#$61,#$62,#$63,#$64,#$65,#$66,#$67,#$68,#$69,#$6a,#$6b,#$6c,#$6d,#$6e,#$6f,
  #$70,#$71,#$72,#$73,#$74,#$75,#$76,#$77,#$78,#$79,#$7a,#$7b,#$7c,#$7d,#$7e,#$7f,
  #$80,#$81,#$82,#$83,#$84,#$85,#$86,#$87,#$88,#$89,#$8a,#$8b,#$8c,#$8d,#$8e,#$8f,
  #$90,#$91,#$92,#$93,#$94,#$95,#$96,#$97,#$98,#$99,#$9a,#$9b,#$9c,#$9d,#$9e,#$9f,
  #$a0,#$a1,#$a2,#$a3,#$a4,#$a5,#$a6,#$a7,#$a8,#$a9,#$aa,#$ab,#$ac,#$ad,#$ae,#$af,
  #$b0,#$b1,#$b2,#$b3,#$b4,#$b5,#$b6,#$b7,#$b8,#$b9,#$ba,#$bb,#$bc,#$bd,#$be,#$bf,
  #$c0,#$c1,#$c2,#$c3,#$c4,#$c5,#$c6,#$c7,#$c8,#$c9,#$ca,#$cb,#$cc,#$cd,#$ce,#$cf,
  #$d0,#$d1,#$d2,#$d3,#$d4,#$d5,#$d6,#$d7,#$d8,#$d9,#$da,#$db,#$dc,#$dd,#$de,#$df,
  #$e0,#$e1,#$e2,#$e3,#$e4,#$e5,#$e6,#$e7,#$e8,#$e9,#$ea,#$eb,#$ec,#$ed,#$ee,#$ef,
  #$f0,#$f1,#$f2,#$f3,#$f4,#$f5,#$f6,#$f7,#$f8,#$f9,#$fa,#$fb,#$fc,#$fd,#$fe,#$ff);

 upperchars: array[char] of char = (
  #$00,#$01,#$02,#$03,#$04,#$05,#$06,#$07,#$08,#$09,#$0a,#$0b,#$0c,#$0d,#$0e,#$0f,
  #$10,#$11,#$12,#$13,#$14,#$15,#$16,#$17,#$18,#$19,#$1a,#$1b,#$1c,#$1d,#$1e,#$1f,
  #$20,#$21,#$22,#$23,#$24,#$25,#$26,#$27,#$28,#$29,#$2a,#$2b,#$2c,#$2d,#$2e,#$2f,
  #$30,#$31,#$32,#$33,#$34,#$35,#$36,#$37,#$38,#$39,#$3a,#$3b,#$3c,#$3d,#$3e,#$3f,
  #$40,#$41,#$42,#$43,#$44,#$45,#$46,#$47,#$48,#$49,#$4a,#$4b,#$4c,#$4d,#$4e,#$4f,
  #$50,#$51,#$52,#$53,#$54,#$55,#$56,#$57,#$58,#$59,#$5a,#$5b,#$5c,#$5d,#$5e,#$5f,
  #$60,'A' ,'B' ,'C' ,'D' ,'E' ,'F' ,'G' ,'H' ,'I' ,'J' ,'K' ,'L' ,'M' ,'N' ,'O' ,
  'P' ,'Q' ,'R' ,'S' ,'T' ,'U' ,'V' ,'W' ,'X' ,'Y' ,'Z' ,#$7b,#$7c,#$7d,#$7e,#$7f,
  #$80,#$81,#$82,#$83,#$84,#$85,#$86,#$87,#$88,#$89,#$8a,#$8b,#$8c,#$8d,#$8e,#$8f,
  #$90,#$91,#$92,#$93,#$94,#$95,#$96,#$97,#$98,#$99,#$9a,#$9b,#$9c,#$9d,#$9e,#$9f,
  #$a0,#$a1,#$a2,#$a3,#$a4,#$a5,#$a6,#$a7,#$a8,#$a9,#$aa,#$ab,#$ac,#$ad,#$ae,#$af,
  #$b0,#$b1,#$b2,#$b3,#$b4,#$b5,#$b6,#$b7,#$b8,#$b9,#$ba,#$bb,#$bc,#$bd,#$be,#$bf,
  #$c0,#$c1,#$c2,#$c3,#$c4,#$c5,#$c6,#$c7,#$c8,#$c9,#$ca,#$cb,#$cc,#$cd,#$ce,#$cf,
  #$d0,#$d1,#$d2,#$d3,#$d4,#$d5,#$d6,#$d7,#$d8,#$d9,#$da,#$db,#$dc,#$dd,#$de,#$df,
  #$e0,#$e1,#$e2,#$e3,#$e4,#$e5,#$e6,#$e7,#$e8,#$e9,#$ea,#$eb,#$ec,#$ed,#$ee,#$ef,
  #$f0,#$f1,#$f2,#$f3,#$f4,#$f5,#$f6,#$f7,#$f8,#$f9,#$fa,#$fb,#$fc,#$fd,#$fe,#$ff);

procedure string8to16(const source: pchar8; const len: int32): string16;
begin
 result:= '';
 pointer(result):= __mla__string8to16a(pointer(source),len);
end;

procedure string8to32(const source: pchar8; const len: int32): string32;
begin
 result:= '';
 pointer(result):= __mla__string8to32a(pointer(source),len);
end;

procedure string16to8(const source: pchar16; const len: int32): string8;
begin
 result:= '';
 pointer(result):= __mla__string16to8a(pointer(source),len);
end;

procedure string16to32(const source: pchar16; const len: int32): string32;
begin
 result:= '';
 pointer(result):= __mla__string16to32a(pointer(source),len);
end;

procedure string32to8(const source: pchar32; const len: int32): string8;
begin
 result:= '';
 pointer(result):= __mla__string32to8a(pointer(source),len);
end;

procedure string32to16(const source: pchar32; const len: int32): string16;
begin
 result:= '';
 pointer(result):= __mla__string32to16a(pointer(source),len);
end;

procedure format(const fmt: string8; const args: array of const): string8;
type
 argsty = record
  high: int32;
  data: pvarrecty;
 end;
 pargsty = ^argsty;

 convertinfoty = record
  ps,pe,pd: pchar8;
  pbuf: pchar8;
  value: int32;
  valindex: int32;
  width,precision: int32;
  minus: bool1;
  s: pointer; //string8, string16 or string32
  pb: pchar8;
  neg: bool1;
  args: pargsty;
 end;

 procedure formaterror();
 begin
  raise econverterror.createfmt(sinvalidformat,[fmt]);
 end; //formaterror()

 procedure converterror();
 begin
  writeln('***converterror***');
 end; //converterror();

 procedure rangeerror();
 begin
  writeln('***rangeerror***');
 end; //rangeerror();
 
 procedure getnum(var info: convertinfoty): bool1;
 var
  ps: pchar8;
 begin
  info.value:= 0;
  ps:= info.ps;
  result:= false;
  if ps^ = '*' then
   inc(ps);
   if info.valindex > info.args^.high then
    formaterror();
   else
    if (args[info.valindex].vtype = vt_int32) then
     info.value:= args[info.valindex].vint32;
     inc(info.valindex);
     result:= true;
    else
     converterror();
    end;
   end;
  else
   if (ps^ >= '0') and (ps^ <= '9') then
    result:= true;
    while ps < info.pe do
     if (ps^ >= '0') and (ps^ <= '9') then
      info.value:= info.value*10 + ord(ps^)-ord('0');
      inc(ps);
     else
      break;
     end;
    end;
   end;
  end;
  info.ps:= ps;
 end; //getnum()

var
 info: convertinfoty; 
 buffer: array[0..255] of char8;

 procedure pushbufferreverse(var info: convertinfoty);
 var
  i1,i2,i3: int32;
  pd,ps,pe: pchar8;
 begin
  i2:= info.pd - pchar8(pointer(result)); //current length
  i1:= info.pbuf - pchar8(@buffer);       //additional text
  if i1 < info.width then
   i3:= i2 + info.width;                  //new length
  else
   i3:= i2 + i1;                          //new length
  end;
  if i3 > length(result) then
   setlength(result,i3 + i3 div 2);         //1.5 * new length
  end;
  ps:= info.pbuf - 1;
  pd:= @pchar8(pointer(result))[i2];
  if not info.minus then
   pe:= pd + info.width - i1;
   while pd < pe do
    pd^:= ' ';
    inc(pd);
   end;
  end;
  pe:= pd + i1;
  while pd < pe do
   pd^:= ps^;
   dec(ps);
   inc(pd);
  end;
  if info.minus then
   pe:= pd + info.width - i1;
   while pd < pe do
    pd^:= ' ';
    inc(pd);
   end;
  end;
  info.pd:= pd;
 end; //pushbufferreverse()

 procedure pushnum(var info: convertinfoty);
 var
  p1,pe1: pchar8;
 begin
  with info do
   p1:= pb;
   pe1:= p1 + precision - (p1 - pchar8(@buffer));
   while p1 < pe1 do
    p1^:= '0';
    inc(p1);
   end;
   if neg then
    p1^:= '-';
    inc(p1);
   end;
   info.pbuf:= p1;
   pushbufferreverse(info);
  end;
 end; //pushnum()

 procedure pushstring32(var info: convertinfoty);
 var
  s1: string8;
  i1,i2,i4,i5: int32;
  padding: int32;
  pd,ps,pe: pchar8;
 begin
  i2:= info.pd - pchar8(pointer(result)); //current length
  i1:= length(string32(info.s));
  if (info.precision >= 0) and (info.precision < i1) then
   i1:= info.precision;
  end;
  s1:= string32to8(info.s,i1);
  padding:= info.width - i1; //padding
  if padding < 0 then
   padding:= 0;
  end;
  i4:= length(s1);
  i5:= i2 + i4;
  if i5 > length(result) then
   setlength(result,i5+i5 div 2);
  end;
  ps:= pointer(s1);
  pd:= @pchar8(pointer(result))[i2];
  if not info.minus then
   pe:= pd + padding;
   while pd < pe do
    pd^:= ' ';
    inc(pd);
   end;
  end;
  pe:= pd + length(s1);
  while pd < pe do
   pd^:= ps^;
   inc(ps);
   inc(pd);
  end;
  if info.minus then
   pe:= pd + padding;
   while pd < pe do
    pd^:= ' ';
    inc(pd);
   end;
  end;
  info.pd:= pd;
 end; //pushstring32()

 procedure pushstring8(var info: convertinfoty);
 var
  s1: string32;
 begin
  s1:= string32(string8(info.s));
  info.s:= pointer(s1);
  pushstring32(info);
 end; //pushstring8()

 procedure pushstring16(var info: convertinfoty);
 var
  s1: string32;
 begin
  s1:= string32(string16(info.s));
  info.s:= pointer(s1);
  pushstring32(info);
 end; //pushstring16()

 procedure pushstring16(var info: convertinfoty; const avalue: string16);
 var
  s1: string32;
 begin
  s1:= string32(avalue);
  info.s:= pointer(s1);
  pushstring32(info);
 end; //pushstring16()

var
 itemindex: int32;

 procedure getflo(out avalue: flo64): boolean;
 begin
  result:= true;
  with args[itemindex] do
   case vtype of
    vt_flo64:
     avalue:= vflo64^;
    vt_int32:
     avalue:= vint32;
    vt_card32:
     avalue:= vcard32;
    vt_int64:
     avalue:= vint64^;
    vt_card64:
     avalue:= vcard64^;
    else:
     result:= false;
     converterror();
   end;
  end;
 end;
 
var
 p1,pe1: pchar8;
 i1: int32;
 i641: int64;
 c1: card32;
 c641: card64;
 b1: boolean;
 f1: flo64;
 decimalsep: char8;
 thousandsep: char8;
  
begin
 decimalsep:= '.'; //todo: use decimalsettings
 thousandsep:= '''';
 setlength(result,length(fmt));
 info.args:= @args;

 with info do
  ps:= pointer(fmt);
  pe:= ps + length(fmt);
  pd:= pointer(result);
  valindex:= 0;
  while ps < pe do
   if ps^ = '%' then
    inc(ps);
    case ps^ of 
     '%':
      pd^:= ps^;
      inc(pd);
     else:
      minus:= false;
      width:= -1;
      precision:= -1;
      itemindex:= valindex;
      b1:= getnum(info);
      if ps^ = ':' then
       valindex:= value; //default 0
       itemindex:= value;
       inc(ps);
       b1:= false;       //consumed
       inc(valindex);    //next value
      end;
      if ps^ = '-' then
       minus:= true;
       inc(ps);
       if b1 then
        formaterror();
       end;
      end;
      if b1 or getnum(info) then
       width:= value;
      end;
      if ps^ = '.' then
       inc(ps);
       if not getnum(info) then
        formaterror();
       end;
       precision:= value;
      end;
      if itemindex > high(format.args) then
       formaterror();
      end;
      p1:= @buffer;
      with format.args[itemindex] do 
       case lowerchars[ps^] of
        'd':
         case vtype of
          vt_int32,vt_card32:
           i1:= vint32;
           if vtype = vt_card32 then
            i1:= vcard32;
            if i1 < 0 then
             rangeerror();
            end;
           end;
           neg:= i1 < 0;
           if neg then
            i1:= -i1;
           end;
           repeat
            p1^:= char8(card8(i1 mod 10)+ord('0'));
            i1:= i1 div 10;
            inc(p1);
           until i1 = 0;
          vt_int64,vt_card64:
           i641:= vint64^;
           if vtype = vt_card64 then
            i641:= vcard64^;
            if i641 < 0 then
             rangeerror();
            end;
           end;
           neg:= i641 < 0;
           if neg then
            i641:= -i641;
           end;
           repeat
            p1^:= char8(card8(i641 mod 10)+ord('0'));
            i641:= i641 div 10;
            inc(p1);
           until i641 = 0;
          else:
           converterror();
         end;
         pb:= p1;
         pushnum(info);
        'u':
         case vtype of
          vt_int32,vt_card32:
           c1:= vcard32;
           if vtype = vt_card32 then
            c1:= vint32;
            if vint32 < 0 then
             rangeerror();
            end;
           end;
           neg:= false;
           repeat
            p1^:= char8(card8(c1 mod 10)+ord('0'));
            c1:= c1 div 10;
            inc(p1);
           until c1 = 0;
          vt_int64,vt_card64:
           c641:= vcard64^;
           if vtype = vt_int64 then
            c641:= vint64^;
            if vint64^ < 0 then
             rangeerror();
            end;
           end;
           neg:= false;
           repeat
            p1^:= char8(card8(c641 mod 10)+ord('0'));
            c641:= c641 div 10;
            inc(p1);
           until c641 = 0;
          else:
           converterror();
         end;
         pb:= p1;
         pushnum(info);
        'e':
          if getflo(f1) then
           i1:= info.precision;
           if i1 < 0 then
            i1:= 14;
           else
            i1:= i1-1
           end;
           info.precision:= -1;
           pushstring16(info,flo64tostring16(f1,i1,fsm_sci,decimalsep));
          end;
        'f':
          if getflo(f1) then
           i1:= info.precision;
           if i1 < 0 then
            i1:= 0;
           end;
           info.precision:= -1;
           pushstring16(info,flo64tostring16(f1,i1,fsm_fix,decimalsep));
          end;
        'n':
          if getflo(f1) then
           i1:= info.precision;
           if i1 < 0 then
            i1:= 0;
           end;
           info.precision:= -1;
           pushstring16(info,flo64tostring16(f1,i1,fsm_fix,decimalsep,
                                                                thousandsep));
          end;
        'g':
          if getflo(f1) then
           i1:= info.precision;
           if i1 < 0 then
            i1:= 0;
           end;
           info.precision:= -1;
           pushstring16(info,flo64tostring16(f1,i1,fsm_fix,decimalsep));
          end;
        's':
         case vtype of
          vt_string8:
           info.s:= vstring8;
           pushstring8(info);
          vt_string16:
           info.s:= vstring16;
           pushstring16(info);
          vt_string32:
           info.s:= vstring32;
           pushstring32(info);
          else:
           converterror();
         end;
       end;
      end;
    end;
   else
    pd^:= ps^;
    inc(pd);
   end;
   inc(ps);
  end;
  setlength(result,pd-pchar8(pointer(result)));
 end;
end;

end.
