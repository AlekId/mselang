//rtl_fpccompatibility
{ MSEpas Copyright (c) 2017-2018 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}
unit rtl_fpccompatibility;
interface
//FPC compatibility
uses
 rtl_system,rtl_strings,rtl_ctypes,rtl_libc,__mla__internaltypes,rtl_base;
 
type
//{$internaldebug on}
 tobject = class;
// iunknown = interface;

 tclass  = class of Tobject;
 pclass  = ^tclass;

 Tobject = class(Cbase) [virtual]
  private
   class method newinst(): pointer [new];
  protected
  public
   constructor create();
   destructor destroy() [override,default];
   method free();
   class method newinstance(): Tobject [virtual];
   method freeinstance [dispose,virtual];
   class method initinstance(instance : pointer): Tobject;
   method cleanupinstance();
   class method classtype(): tclass;
   class method classinfo(): pointer; //returns pobjectrttity
   class method classname(): string8;
   class method classnameis(const name: string8): boolean;
   class method classparent(): tclass;
   class method instancesize(): int32;
   class method inheritsfrom(aclass: tclass): boolean;
   //class method stringmessagetable : pstringmessagetable;
                         //not implemented

        //todo
   //class method MethodAddress(const name : shortstring) : codepointer;         
   //class method MethodName(address : codepointer) : shortstring;
   //method FieldAddress(const name : shortstring) : pointer;

   method afterconstruction() [afterconstruct,virtual];
   method beforedestruction() [beforedestruct,virtual];
   
 end; 
 
 pchar = ^char8;
 sizeint = intptr;
 tdatetime = datetimety;
 tsize = size_t;
 tssize = ssize_t;
 
procedure move(const source; var dest; count: sizeint);
procedure now(): tdatetime;
procedure trunc(d: flo64): int64;
procedure round(d: flo64): int64;
procedure fpopen(path: pchar; flags: cint):cint;
procedure fpwrite(fd: cint; buf: pchar; nbytes: tsize): tssize;
procedure fpclose(fd: cint): cint;

implementation

procedure move(const source; var dest; count: sizeint);
begin
 memmove(@dest,@source,count);
end;

procedure now(): tdatetime;
begin
 result:= nowutc();
end;

procedure trunc(d: flo64): int64;
begin
 result:= truncint64(d);
end;

procedure round(d: flo64): int64;
begin
 result:= truncint64(nearbyint(d));
end;

procedure fpopen (path : pchar; flags : cint):cint;
begin
 result:= open(path,flags,[]);
end;

procedure fpwrite(fd: cint; buf: pchar; nbytes: tsize): tssize;
begin
 result:= write(fd,buf,nbytes);
end;

procedure fpclose(fd: cint): cint;
begin
 result:= close(fd);
end;

{ Tobject }

constructor Tobject.create();
begin
 //dummy
end;

destructor Tobject.destroy();
begin
 //dummy
end;

method Tobject.free();
begin
 if self <> nil then
  destroy();
 end;
end;

class method Tobject.newinst(): pointer;
begin
 result:= newinstance();
end;

class method Tobject.newinstance(): Tobject;
begin
 result:= getmem(sizeof(self^));
 initialize(result,classof(self));
end;

method Tobject.freeinstance();
begin
 finalize(self^);
 freemem(self);
end;

class method Tobject.initinstance(instance: pointer): Tobject;
begin
 result:= instance;
 initialize(result,classof(self));
end;

method Tobject.cleanupinstance();
begin
 finalize(self^);
end;

class method Tobject.classtype(): tclass;
begin
 result:= tclass(self);
end;

class method Tobject.classparent(): tclass;
begin
 result:= tclass(pclassdefty(classof(self))^.header.parentclass);
end;
   
class method Tobject.classinfo(): pointer; //returns pobjectrttity
begin
 result:= pclassdefty(self)^.header.rtti;
end;

class method Tobject.classname(): string8;
begin
 decref(result);
 pointer(result):= pointer(prttity(classinfo)^.typename); 
                                          //const, no incref needed
end;

class method Tobject.classnameis(const name: string8): boolean;
begin
 result:= stringicomp(name,
            string8(prttity(pclassdefty(self)^.header.rtti)^.typename)) = 0;
end;

class method Tobject.instancesize(): int32;
begin
 result:= sizeof(self^);
end;

class method Tobject.inheritsfrom(aclass: tclass): boolean;
begin
 result:= self is aclass;
end;

method Tobject.afterconstruction();
begin
 //dummy
end;

method Tobject.beforedestruction();
begin
 //dummy
end;

end.
