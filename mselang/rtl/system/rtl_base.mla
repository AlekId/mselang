//rtl_base
{ MSEpas Copyright (c) 2017 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}
unit rtl_base;
//base functions, preliminary ad-hoc implementation
interface
uses
 __mla__internaltypes;
 
type
 pint8 = ^int8;
 pint16 = ^int16;
 pint32 = ^int32;
 pint64 = ^int64;
 
 pcard8 = ^card8;
 pchar8 = ^char8;

 pppointer = ^ppointer;
  
 tbase = class() [virtual]
  destructor destroy() [virtual];
  constructor create();
  method free();
  method rtti(): pobjectrttity;
  method classname(): string8;
//  method test() [virtual];
 end;
  
procedure inttostr(const value: integer): string;
procedure random(const limit: int32): int32;
procedure random(const limit: int64): int64;

implementation
{
method tbase.test();
begin
 writeln('tbase.test');
end;
}
procedure inttostr(const value: integer): string;
var
 buffer: array[0..22] of char;
 int1,int2: integer;
 lwo1,lwo2: longword;
begin
 lwo1:= abs(value);
 if lwo1 = 0 then
  result:= '0';
  exit;
 end;
 int1:= high(buffer);
 while lwo1 > 0 do
  lwo2:= lwo1 div 10;
  buffer[int1]:= char(card8(lwo1 - lwo2 * 10 + ord('0')));
  lwo1:= lwo2;
  dec(int1);
 end;
 if value < 0 then
  buffer[int1]:= char('-');
  dec(int1);
 end;
 int2:= (high(buffer))-int1;
 setlength(result,int2);
 memcpy(pointer(result),@buffer[int1+1],int2*sizeof(char));
end;

const
 defaultmwcseedw = 521288629;
 defaultmwcseedz = 362436069;

var
 fw: card32;
 fz: card32;

procedure mwcnoise: card32;
begin
 fz:= 36969 * (fz and $ffff) + (fz shr 16);
 fw:= 18000 * (fw and $ffff) + (fw shr 16);
 result:= fz shl 16 + fw;
end;

//todo: use mersenne twister

procedure random(const limit: int32): int32;
begin
 result:= mwcnoise();
 if limit > 0 then
  result:= card32(result) mod card32(limit);
 else
  result:= 0;
 end;
end;

procedure random(const limit: int64): int64;
begin
 result:= (int64(mwcnoise()) shl 32) or mwcnoise();
 if limit > 0 then
  result:= card64(result) mod card64(limit);
 else
  result:= 0;
 end;
end;

{ tbase }

constructor tbase.create();
begin
 //dummy
end;

destructor tbase.destroy();
begin
 //dummy
end;

method tbase.free();
begin
 if self <> nil then
  destroy();
 end;
end;

method tbase.rtti(): pobjectrttity;
begin
 result:= pointer(typeinfo(classof(self)));
end;

method tbase.classname(): string8;
var
 p1: pobjectrttity;
begin
 result:= '';
 p1:= rtti;
 if p1 <> nil then
  result:= string8(p1^.typename);
 end;
end;

initialization
 fw:= defaultmwcseedw;
 fz:= defaultmwcseedz;
end.
