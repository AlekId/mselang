//rtl_sysexceptions
{ MSElang Copyright (c) 2018 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
} 
unit rtl_sysexceptions;
interface
uses
 rtl_exceptions;
type
 exception = class(texception) end;

 econverterror = class(exception) end;
 eformaterror = class(exception) end;
 enotimplemented = class(exception) end;
 erttierror = class(exception) end;
 enotimplementederror = class(exception) end;

 estreamerror = class(exception) end;
 ereaderror = class(estreamerror) end;
 ewriteerror = class(estreamerror) end;
 
 eerror = class(exception)
  text: string;
  constructor create(const error: int32; const atext: string8;
                          const errortexts: array of string8);
  property error: int32 read ferror;
  private
  protected
   ferror: int32;
 end;

procedure notimplementederror(const amessage: string8);

implementation
uses
 rtl_sysconsts,rtl_strings,rtl_stringconv;

const lineend = #$0a;

procedure xx(const amessage: string8);
begin
end;

procedure notimplementederror(const amessage: string8);
begin
 raise enotimplementederror.create(snotimplementederror+':'+lineend+amessage);
end;

{ eerror }

constructor eerror.create(const error: int32; const atext: string8;
               const errortexts: array of string8);
var
 ch1: char8;
 s1: string8;
begin
 ferror:= error;
 text:= atext;
 if (error >= 0) and (error <= high(errortexts)) then
  s1:= errortexts[error];
 else
  s1:= serror+':'+inttostr8(error);
 end;
 if text = '' then
  inherited create(s1+'.');
 else
  text:= s1+ ' ' + text;
  ch1:= text[length(text)];
  if (ch1 <> '.') and (ch1 <> c_return) and (ch1 <> c_linefeed) then
   text:= text + '.';
  end;
  inherited create(text);
 end;
end;

end.
