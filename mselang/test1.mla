//{$mode pascal}
program dispose;
//uses
// rtl_fpccompatibility;
type
{
 tobject = class()[virtual]
  private
   class method newinst(): pointer [new];
  protected
  public
   constructor create();
   destructor destroy() [virtual,default];
   procedure free();
   class method newinstance(): tobject [virtual];
   procedure freeinstance [dispose,virtual];
   class method initinstance(instance : pointer) : tobject;
 end;
}
 ttest = class;
 tclass = class of ttest;
 ttest = class({tobject})[virtual]
  constructor create();
  destructor destroy();
  method test(a: int32) [virtual];
  class method classtype: tclass;
//  method dispose() [dispose,virtual];
 end;

 ttest1 = class(ttest)
  method test(a: int32) [override];
//  method freeinstance() [override];
 end;
 tclass1 = class of ttest1;

{ tobject }
(*
constructor tobject.create();
begin
 //dummy
end;

destructor tobject.destroy();
begin
 //dummy
end;

class method tobject.newinst(): pointer;
begin
 result:= newinstance();
end;

class method tobject.newinstance(): tobject;
begin
 result:= getmem(sizeof(self^));
 initialize(result,classof(self));
end;

procedure tobject.freeinstance();
begin
writeln('freeinstance');
 finalize(self^);
 freemem(self);
end;

class method tobject.initinstance(instance: pointer): tobject;
begin
 result:= instance;
 initialize(result,classof(self));
end;

procedure tobject.free();
begin
 if self <> nil then
  destroy();
 end;
end;
*)
constructor ttest.create();
begin
end;

destructor ttest.destroy();
begin
end;
{
method ttest.dispose();
begin
 writeln('dispose');
 finalize(self^);
 freemem(self);
end;
}
method ttest.test(a: int32);
begin
end;

class method ttest.classtype: tclass;
begin
// result:= tclass(self);
end;

method ttest1.test(a: int32);
begin
{$internaldebug on}
// inherited;
end;
{
method ttest1.freeinstance();
begin
 writeln('freeinstance');
 inherited;
end;
}
var
 c2: ttest;
 v1: tclass1;
 i1: int32;
begin
{$internaldebug on}
 v1:= ttest1;
 c2:= ttest1.create();
 c2.destroy();
 writeln(typeinfo(i1));
end.