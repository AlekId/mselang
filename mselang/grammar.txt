#todo: use handler for whitespace
@whitespace
 ' ',#$0d,#$0a
{whitespace}
"@whitespace,-
 '{$',directive-^*
 '{',comment0-^*
 '//',linecomment0-^*"
{blockswitch}
" 'implementation'.,*
 'var'.,*
 'type'.,*
 'const'.,*
"

@keywordstart
 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p'
 'q','r','s','t','u','v','w','x','y','z'
 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P'
 'Q','R','S','T','U','V','W','X','Y','Z'
@identstart
 '_',@keywordstart
@binnum
 '0','1'
@octnum
 @binnum,'2','3','4','5','6','7'
@decnum
 @octnum,'8','9'
@hexnum
 @decnum,'a','b','c','d','e','f','A','B','C','D','E','F'
@.handlerunits
 'handler','unithandler','classhandler','typehandler'
@.internaltokens
 '.classes','.private','.protected','.public','.published'
start,nounit,,
 ${whitespace} 
 'unit'.,unit0-
nounit,,,handlenouniterror
unit0,nounitname,,
 ${whitespace}
 @identstart,ident^*,unit1
nounitname,,handlenounitnameerror,
unit1,unit2,setunitname,*
unit2,semicolonexpected,,
 ${whitespace}
 ';',start1-
#
checksemicolon,,,^
 ${whitespace}
 ';',-*
 '',semicolonexpected
checksemicolon1,,,^*>
 ${whitespace}
 ';',-*
 '',semicolonexpected
checksemicolon2,,,*>
 ${whitespace}
 ';',-*
 '',semicolonexpected
semicolonexpected,,,handlesemicolonexpected
identexpected,,,handleidentexpected
start1,start2,,
 ${whitespace}
 'uses'.,uses0-*,start2
uses0,uses1,,
 '',commaidents^*
uses1,useserror,,
 ';',usesok-
useserror,,,handleuseserror
usesok,,,handleuses

start2,noimplementation,,
 ${whitespace}
 'implementation'.,implementation-
 'const'.,const-*
 'var'.,var-*
 'type'.,type-*
 'procedure'.,procedureheader-*^>
 'function'.,functionheader-*^>

functionheader,procedureheader,handlefunctionentry,

#comma separated idents on stack
commaidents,commaidentsnoidenterror,,
 ${whitespace}
 @identstart,commaidents1
commaidents1,commaidents2,,
 '',ident^*
commaidents2,,,^
 ',',commaidents-
commaidentsnoidenterror,,,handlenoidenterror

noimplementation,,,handlenoimplementationerror

implementation,implementationstart,interfacestop,
implementationstart,main,implementationstart,

main,main1,,
 ${whitespace}
 'uses'.,uses0-*
main1,,,handlemain
 ${whitespace}
 'procedure'.,procedure-^*>
 'function'.,function-^*>
 'begin'.,progbegin-
 'const'.,const-*>
 'var'.,var-*>

function,procfunc,handlefunctionentry,
procedure,procfunc,handleprocedureentry,

comment0,,,handlecommentend^*>
 '}',-*
 '',-
#comment1,,,handlecommentend^>
directive,,,*
 'dumpelements'.,dumpelements-*
 'abort'.,abort-*
 '}',-*
 '',-
dumpelements,directiveend,handledumpelements,
abort,directiveend,handleabort,
directiveend,,,^*>
 '}',-*
 '',
linecomment0,,,*
 #$0a,linecomment1-
 '',-
linecomment1,,,handlecommentend^*>
progbegin,progblock,handleprogbegin,
progblock,,,handleprogblock*
 '',statementblock-^*
#
paramsdef0,,,
 ${whitespace}
 '(',paramsdef1-
paramsdef1,paramsdef2,handleparamsdef1entry,
 '',paramdef0^*
paramsdef2,,,
 ${whitespace}
 ';',paramsdef1-
 ')',paramsdef3-
paramsdef3,,,^
paramdef0,paramdef1,,
 ${whitespace}
 'const'.,!setconstparam->
 'var'.,!setvarparam->
 'out'.,!setoutparam->
 @identstart,ident^*
paramdef1,,,*
 ${whitespace}
 ':',paramdef2-
paramdef2,,,handleparamdef2^
 ${whitespace}
 @identstart,ident^*
#
procedureheader,,,handleprocedureheader*
 '',procedure0-*
procfunc,procedurea,,
 '',procedure0*
procedurea,,,
 '',procedure4*
procedure0,procedure1,,
 ${whitespace}
 @identstart,ident^*
procedure1,procedure2,,
 '',paramsdef0^*
procedure2,,,
 ${whitespace}
 ':',functiontype-^*>
 ';',!handleprocedure3-*
#      handle parameters
 '',semicolonexpected

functiontype,,,checkfunctiontype^
 '',functiontypea*
# same layout as parameter
functiontypea,,,
 ${whitespace}
 @identstart,ident^*

# ';',procedure3-
#procedure3,procedure4,,handleprocedure3
# mark
procedure4,checkterminator,,
 ${whitespace}
 'begin'.,procedure5a-
 'const'.,const-*
 'var'.,var-*
 'procedure'.,procedure-^*>
procedure5a,procedure5,handleprocedure5a,
# set procstartaddress
procedure5,procedure6,,
 '',statementblock^*
procedure6,checkterminatorpop,handleprocedure6,
# return, release
checkterminator,,,handlecheckterminator
 ';',terminatorok-
 ${whitespace}
terminatorok,,,*
checkterminatorpop,,,handlecheckterminator
 ';',terminatorokpop-
 ${whitespace}
terminatorokpop,,,^*

statementstack,,,^
 '',statement*
statement,,,*
 ${whitespace}
 ';',endcontext-
 'begin'.,statementblock-^*
 'end'.,endcontext
 'if'.,if0-
 '',simplestatement
endcontext,,,
blockend,,,handleblockend^*
simplestatement,,,*
 '',statement0*
statementblock,statementblock1,,*
 '',statement*
statementblock1,,,handlestatementblock1*
 ${whitespace}
 ';',statementblock-
 'end'.,blockend-
statement0,statement1,handlestatement0entry,
 '',exp^*
# '',identpath^*
statement1,,handleleftside,handlestatementexit
 ${whitespace}
 ':=',assignment-
# '^',!setleftreference
assignment,,handleassignmententry,handleassignment
 '',exp^*
if0,if,handleif0,
 ${whitespace}
if,then,handleif,
 '',exp^*
then,,,handlethen
 ${whitespace}
 'then'.,then0-
then0,then1,handlethen0,
then1,then2,handlethen1,
 '',statementstack^*
then2,,,handlethen2
 ${whitespace}
 'else'.,else0-
else0,else,handleelse0,
else,,,handleelse
 '',statementstack^*
const,,,*>
 ${whitespace}
 ${blockswitch}
 '',const0^*
const0,const1,,handleidentexpected^
 ${whitespace}
 @identstart,ident^*
const1,,,handleequalityexpected^
 ${whitespace}
 '=',const2-
const2,const3,,
 '',exp^*
const3,,handleconst3,
 '',checksemicolon1
#
simpletype,rangetype,,+
 @identstart,typeident*
typeident,checktypeident,,
 '',identpath^*
checktypeident,,,handlechecktypeident
rangetype,,,handlecheckrangetype*^
 '',getrange^*
# 
#handlesimpletype*^
#
recorddef,recorddef0,handlerecorddefstart,
recorddef0,recorddeferror,,
 ${whitespace}
 @identstart,recordfield^*
 'end'.,recorddefreturn-
recorddeferror,,,handlerecorddeferror^
recordfield,,,handlerecordfield^>
 '',vardef^*
recorddefreturn,,handlerecordtype,*^
#
arraydef,arraydef1,,
 ${whitespace}
 '',arrayindex*
arraydef1,,,handlearraydeferror1
 ${whitespace}
 'of'.,arraydef2-
arraydef2,,,handlearraytype
 '',getfieldtype^*
#
arrayindex,,,handlearrayindexerror1
 '[',arrayindex1-
arrayindex1,arrayindex2,,
 '',getfieldtype^*
arrayindex2,,,
 ',',getfieldtype-^*>
 ']',-*
  '',!handlearrayindexerror2*
#
getfieldtype,gettype,handlegetfieldtypestart,
gettypetype,gettype,handlegettypetypestart,
gettype,,,*^
 ${whitespace}
 '^',!handlepointertype-
# @identstart,simpletype^*
 'record'.,recorddef-^*
 'array'.,arraydef-^*
 'class'.,classdef-,classdefreturn
 '',simpletype^*
# '',identexpected
#
var,,,*>
 ${whitespace}
 ${blockswitch}
 '',var0*^
var0,var1,,
 @identstart,ident^*
var1,,handlevardefstart,
 ${whitespace}
 ':',var2-
var2,var3,,
 '',getfieldtype^*
var3,checksemicolon2,,handlevar3
#
vardef,vardef0,,
 '',ident^*
vardef0,,handlevardefstart,
 ${whitespace}
 ':',vardef1-
vardef1,checksemicolon,,
 '',getfieldtype^*
# ${whitespace}
# @identstart,identpath^*
#
type,,,handletype>
 ${whitespace}
 ${blockswitch}
 '',type0*^
type0,type1,,
 @identstart,identpath^*
type1,,,handleequalityexpected
 ${whitespace}
 '=',type2-
type2,type3,,*
 '',gettypetype^*
type3,,,*>
 ${whitespace}
 ';',-*
 '',semicolonexpected
#
getrange,getrange1,,
 '',exp^*
getrange1,,,handlerange1
 ${whitespace}
 '..',getrange3-
getrange3,,,handlerange3^
 '',exp^*

#
classdef,classdef0,handleclassdefstart,
classdef0,classdeferror,,
 ${whitespace}
 'private'.,!handleclassprivate-
 'protected'.,!handleclassprotected-
 'public'.,!handleclasspublic-
 'published'.,!handleclasspublished-
 @identstart,classfield^*
 'end'.,classdefreturn-
classdeferror,,handleclassdeferror,^
classdefreturn,type3,handleclassdefreturn,*
classfield,,,handleclassfield^*>
 '',vardef^*
#

statementend,,,handlestatementend!
exp,exp1,,
 '',simpexp*
exp1,,,handleexp^
 ${whitespace}
 '=',equsimpexp-*
equsimpexp,,,handleequsimpexp
 '',simpexp*
simpexp,simpexp1,,
 '',term*
simpexp1,simpexp1,,
 ${whitespace}
 '+',addterm-*
 '',simpexp1a
simpexp1a,,,handlesimpexp1
addterm,,,handleaddterm
 '',term*
fact,fact1,handlefactstart,
 ${whitespace}
 '+',-
 '-',!handlenegfact-
 '@',!handleaddressfact-
 '(',bracketstart-*
 @decnum,num*
 '%',binnum-*
 '&',octnum-*
 '$',hexnum-*
 '''',string-*
 '#',char-*
 @identstart,valueidentifier*
 '',illegalexpression
#
valueidentifier,checkvalueparams,,
 '',identpath^*
#
checkvalueparams,,,handlevalueidentifier
 ${whitespace}
 '(',params0-^*
checkparams,,,^
 ${whitespace}
 '(',params0-
params0,params1,handleparams0,
params1,params2,,
 '',exp^*
params2,,,
 ${whitespace}
 ',',params1-
 ')',paramsend-
paramsend,,handleparamsend,^
#
fact1,,,handlefact
 ${whitespace}
 '^',!handledereference-
 '[',getindex-^*>
#
getindex,getindex1,handleindexstart,
 '',exp^*
getindex1,,,handleindex
 ${whitespace}
 ']',-*
 ',',getindex2-
 '',!closesquarebracketexpected
getindex2,getindex1,,
 '',exp^*
#
term,term1,,
# ${whitespace}
# '@',getaddress-
 '',fact*
#getaddress,term1,,handleaddress
# '',fact*
#
term1,,,handleterm
 ${whitespace}
 '*',mulfact*>
# '',term1a
#term1a,,,handleterm1
#negterm,term,handlenegterm,
#
illegalexpression,,,handleillegalexpression*
#
mulfact,,,handlemulfact
 '',fact*
#todo: use handler for number evaluation
num,,,handleint
 @decnum,-
 '.',checkfrac-+*
 'e','E',fracexp-*
fracexp,frac,,
 '',exponent*
checkfrac,,,*+
 @decnum,frac
frac,,,handlefrac
 @decnum,-
 'e','E',exponent-*
exponent,,,handleexponent
 '',number*
number,,handlenumberentry,
 '+',!posnumber-
 '-',!negnumber-
 @decnum,decnum
 '',numberexpected
decnum,,,handledecnum
 @decnum,-
#
binnum,,,handlebinnum
 @binnum,-
octnum,,,handleoctnum
 @octnum,-
hexnum,,,handlehexnum
 @hexnum,-
# 
ordnum,,,
 @decnum,decnum
 '%',binnum-
 '&',octnum-
 '$',hexnum-
 '',numberexpected
string,,handlestringstart,
 '''',string1-
 #$0a,!stringlineenderror-*
 '',-
string1,,copystring,handlestring
 '''',apostrophe-
 '#',char-
apostrophe,,copyapostrophe,
 '''',string1-
 '',string
char,char1,handlestringstart,
 '',ordnum*
char1,string,handlechar,
 '''',string-
 '#',char-
 '',char2
char2,,,handlestring
#
ident,,,handleident^
 @identstart,@decnum,-
#
identpathcontinue,,,^>
 '',identpath^*
identpath,identpath1a,,
 @identstart,@decnum,-
identpath1a,identpath1,handleidentpath1a,
#set ident
identpath1,,,^
#finish
 ${whitespace}
 '..',*
 '.',identpath2a+-
identpath2a,identpath2,handleidentpath2a,
# set continue flag
identpath2,,,handleidentpath2^
#error
 ${whitespace}
 @identstart,identpath*
#
#
bracketstart,bracketend,,
 '',simpexp*
bracketend,,,handlebracketend
 ${whitespace}
numberexpected,,,handlenumberexpected*
