@whitespace
 ' ',#$0d,#$0a
{whitespace}
"@whitespace,
 '{$',directive-^*
 '{',comment0-^*
 '//',linecomment0-^*"
@keywordstart
 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p'
 'q','r','s','t','u','v','w','x','y','z'
 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P'
 'Q','R','S','T','U','V','W','X','Y','Z'
@identstart
 '_',@keywordstart
@num
 '0','1','2','3','4','5','6','7','8','9'
@.handlerunits
 'handler','unithandler','classhandler','recordhandler'
@.internaltokens
 '.classes','.private','.protected','.public','.published'
start,nounit,,
 ${whitespace} 
 'unit'.,unit0-
nounit,,,handlenouniterror
unit0,nounitname,,handlenounitnameerror
 ${whitespace}
 @identstart,ident^*,unit1
nounitname,,,handlenounitnameerror
unit1,unit2,,setunitname
unit2,semicolonexpected,,
 ${whitespace}
 ';',start1-
#
checksemicolon,,,^
 ${whitespace}
 ';',-*
 '',semicolonexpected
semicolonexpected,,,handlesemicolonexpected
identexpected,,,handleidentexpected
start1,start2,,
 ${whitespace}
 'uses'.,uses0-
uses0,uses1,,
 '',commaidents^*
uses1,useserror,,
 ';',usesok-
useserror,,,handleuseserror
usesok,start1,,handleuses

start2,noimplementation,,
 ${whitespace}
 'implementation'.,implementation
 'const'.,const-*
 'var'.,var-*
 'type'.,type-*

#comma separated idents on stack
commaidents,commaidentsnoidenterror,,
 ${whitespace}
 @identstart,commaidents1
commaidents1,commaidents2,,
 '',ident^*
commaidents2,,,^
 ',',commaidents
commaidentsnoidenterror,,,handlenoidenterror

noimplementation,,,handlenoimplementationerror

implementation,main,,implementationstart

main,main1,,handlemain
 ${whitespace}
 'procedure'.,procedure0-*
 'begin'.,progbegin-
 'const'.,const-*
 'var'.,var-*
main1,main,,handlemain1
comment0,,,handlecommentend^*>
 '}',-*
 '',
#comment1,,,handlecommentend^>
directive,,,*
 'dumpelements'.,dumpelements-*
 'abort'.,abort-*
 '}',-*
 '',
dumpelements,directiveend,,handledumpelements
abort,directiveend,,handleabort
directiveend,,,^*>
 '}',-*
 '',
linecomment0,,,*
 #$0a,linecomment1-
 '',
linecomment1,,,handlecommentend^*>
progbegin,progblock,,handleprogbegin
progblock,,,
 '',statementblock-^*
paramsdef0,,,
 ${whitespace}
 '(',paramsdef1-
paramsdef1,paramsdef2,,
 '',paramdef0^*
paramsdef2,,,
 ${whitespace}
 ';',paramsdef1-
 ')',paramsdef3-
paramsdef3,,,^
paramdef0,paramdef1,,
 ${whitespace}
 @identstart,ident^*
paramdef1,,,*
 ${whitespace}
 ':',paramdef2
paramdef2,,,^
 ${whitespace}
 @identstart,ident^*
procedure0,procedure1,,
 ${whitespace}
 @identstart,ident^*
procedure1,procedure2,,
 '',paramsdef0^*
procedure2,,,
 ${whitespace}
 ';',procedure3-
procedure3,procedure4,,handleprocedure3
#mark
procedure4,checkterminator,,
 ${whitespace}
 'begin'.,procedure5
 'const'.,const-*
 'var'.,var-*
procedure5,procedure6,,
 '',statementblock-^*
procedure6,checkterminator,,handleprocedure6
# return, release
checkterminator,,,handlecheckterminator
 ';',terminatorok-
 ${whitespace}
terminatorok,,,*
statementstack,,,^
 '',statement*
statement,,,*
 ${whitespace}
 ';',endcontext
 'begin'.,statementblock-^*
 'end'.,endcontext
 'if'.,if0-
 '',simplestatement
endcontext,,,
blockend,,,handleblockend^*
simplestatement,,,*
 '',statement0*
statementblock,statementblock1,,*
 '',statement*
statementblock1,,,handlestatementblock1*
 ${whitespace}
 ';',statementblock-
 'end'.,blockend-
statement0,statement1,,
 '',identpath^*
statement1,checkproc,,
 ${whitespace}
 ':=',assignment
checkproc,,,handlecheckproc
 '',checkparams^*
assignment,,,handleassignment
 '',exp^*
if0,if,,
 ${whitespace}
if,then,,handleif
 '',exp^*
then,,,handlethen
 ${whitespace}
 'then'.,then0-
then0,then1,,handlethen0
then1,then2,,handlethen1
 '',statementstack^*!
then2,,,handlethen2
 ${whitespace}
 'else'.,else0-
else0,else,,handleelse0
else,,,handleelse
 '',statementstack^*!
const,,,handleconst>
 '',const0*^
const0,const1,,
 ${whitespace}
 @identstart,ident^*
const1,,,+
 ${whitespace}
 '=',const2-
const2,const3,,
 '',exp^*
const3,const0-,,handleconst3
 ${whitespace}
 ';',statementend-*
#
var,,,handlevar>
 '',var0*^
var0,var1,,
 ${whitespace}
 @identstart,ident^*
var1,,handlevar1,+
 ${whitespace}
 ':',var2-
var2,identexpected,,
 ${whitespace}
 @identstart,identpath^*>,var3^
 '^',!handlepointervar-
var3,var0-,,handlevar3*
 ${whitespace}
 ';',-*
 '',semicolonexpected
type,,,handletype>
 '',type0*^
type0,type1,,
 ${whitespace}
 @identstart,identpath^*
type1,type1a,,handletypedefstart
type1a,,,+
 ${whitespace}
 '=',type2-
type2,type3,,
 ${whitespace}
 '^',!handlepointertype-
 'record'.,recorddef-,recorddefreturn
 'class'.,classdef-,classdefreturn
 @identstart,identpath^*
type3,type4-,,handletype3
type4,type0-,,
 ${whitespace}
 ';',-*
 '',semicolonexpected
#
recorddef,recorddef0,,handlerecorddefstart
recorddef0,recorddeferror,,
 ${whitespace}
 @identstart,recordfield^*
 'end'.,recorddefreturn-
recorddeferror,,,handlerecorddeferror^
recordfield,,,handlerecordfield^>
 '',vardef^*
recorddefreturn,type4-,,handlerecorddefreturn*
#
classdef,classdef0,,handleclassdefstart
classdef0,classdeferror,,
 ${whitespace}
 'private'.,!handleclassprivate-
 'protected'.,!handleclassprotected-
 'public'.,!handleclasspublic-
 'published'.,!handleclasspublished-
 @identstart,classfield^*
 'end'.,classdefreturn-
classdeferror,,,handleclassdeferror^
classdefreturn,type4-,,handleclassdefreturn*
classfield,,,handleclassfield^*>
 '',vardef^*
#
vardef,vardef0,,
 '',ident^*
vardef0,,,
 ${whitespace}
 ':',vardef1-
vardef1,checksemicolon,,
 ${whitespace}
 @identstart,identpath^*
#

statementend,,,handlestatementend!
exp,exp1,,
 '',simpexp*
exp1,,,handleexp^
 ${whitespace}
 '=',equsimpexp*
equsimpexp,,,handleequsimpexp
 '',simpexp*
simpexp,simpexp1,,handlesimpexp
 '',term*
simpexp1,simpexp1,,handlesimpexp1
 ${whitespace}
 '+',addterm*
addterm,,,handleaddterm
 '',term*
term,term1,,handleterm
 ${whitespace}
 '+',
 '-',negterm*
 '(',bracketstart*
 @num,num*
 @identstart,valueidentifier*
term1,term1,,handleterm1
 ${whitespace}
 '*',mulfact*
negterm,term,,handlenegterm
mulfact,,,handlemulfact
 ${whitespace}
 '+',
 '-',negterm*
 '(',bracketstart*
 @num,num*
num0,,,dummyhandler
 @num,num*
 ' ',
num,,,handledecnum
 @num,
 '.',frac*
frac,,,handlefrac
 @num,
 'e','E',exponent*
ident,,,handleident^
 @identstart,@num,
#
identpathcontinue,,,^>
 '',identpath^*
identpath,identpath1a,,
 @identstart,@num,
identpath1a,identpath1,,handleidentpath1a
#set ident
identpath1,,,^
#finish
 ${whitespace}
 '.',identpath2a+-
identpath2a,identpath2,,handleidentpath2a
# set continue flag
identpath2,,,handleidentpath2^
#error
 ${whitespace}
 @identstart,identpath*
#
valueidentifier,checkvalueparams,,handlevalueidentifier
 '',identpath^*
#
checkvalueparams,,,handlevalueidentifier
 ${whitespace}
 '(',params0-^*
checkparams,,,^
 ${whitespace}
 '(',params0-
params0,params1,,
 '',exp^*
params1,,,
 ${whitespace}
 ',',params0-
 ')',paramsend-
paramsend,,,^
#
bracketstart,bracketend,,dummyhandler
 '',simpexp*
bracketend,,,handlebracketend
 ${whitespace}
exponent,,,handleexponent
 '+',
 '-',negexponent*
 @num,num*
negexponent,,,handlenegexponent
 @num,num*
