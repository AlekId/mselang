//__mla__debugmemhandler
{ MSEgui Copyright (c) 2017-2018 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}
unit __mla__debugmemhandler;
interface

type
 size_t = int32; //todo: 64 bit
 
procedure __mla__malloc(size: size_t): pointer;
procedure __mla__calloc(nmemb: size_t; size: size_t): pointer;
procedure __mla__free(ptr: pointer);

procedure malloc(size: size_t): pointer [external];
procedure calloc(nmemb: size_t; size: size_t): pointer [external];
procedure free(ptr: pointer) [external];

implementation
var
 alloccount: int32;
//{$internaldebug on}
procedure __mla__malloc(size: size_t): pointer [noexception];
begin
 result:= malloc(size);
 inc(alloccount);
end;

procedure __mla__calloc(nmemb: size_t; size: size_t): pointer [noexception];
begin
 result:= calloc(nmemb,size);
 inc(alloccount);
end;

procedure __mla__free(ptr: pointer) [noexception];
begin
 free(ptr);
 dec(alloccount);
end;

finalization
 if alloccount <> 0 then
  writeln('********** Memory alloc error ',alloccount,' blocks');
 end;
end.
