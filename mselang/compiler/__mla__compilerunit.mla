{ MSEgui Copyright (c) 2014-2015 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}
unit __mla__compilerunit;
interface 
uses
 __mla__internaltypes;

procedure __mla__decrefsize(ref: prefsizeinfoty);
procedure __mla__finirefsize(const ref: pprefsizeinfoty);
function __mla__initclass(const classinfo: classdefinfoty): pointer;

implementation

procedure __mla__decrefsize(ref: prefsizeinfoty);
begin
 if ref <> nil then begin
  dec(ref);
  if ref^.ref.count > 0 then begin
   dec(ref^.ref.count);
   if ref^.ref.count = 0 then begin
    freemem(ref);
   end;
  end;
 end;
end;

procedure __mla__finirefsize(const ref: pprefsizeinfoty);
var
 d: prefsizeinfoty;
begin
 d:= ref^;
 if d <> nil then begin
  dec(d);
  if d^.ref.count > 0 then begin
   dec(d^.ref.count);
   if d^.ref.count = 0 then begin
    freemem(d);
   end;
  end;
  ref^:= nil;
 end;
end;

function __mla__initclass(const classinfo: classdefinfoty): pointer;
var
 ps,pd,pe: popaddressty;
begin
 writeln(@classinfo);
 writeln(classinfo.header.allocsize);
 getzeromem(result,classinfo.header.allocsize);
 pd:= result + classinfo.header.fieldsize; //copy interface table
 pe:= result + classinfo.header.allocsize;
 ps:= @classinfo + classinfo.header.interfacestart;
 while pd < pe do begin
  pd^:= ps^;
  inc(pd);
  inc(ps);
 end;
 writeln(result);
end;

end.
