{ MSEgui Copyright (c) 2014 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}
unit __mla__compilerunit;
interface 

type
 ppointer = ^pointer;

type             //todo: use "internaltypes"
 refcountty = int32;
 managedsizety = int32;
 stringsizety = managedsizety;
 pstringsizety = ^stringsizety;
 dynarraysizety = managedsizety;
 pdynarraysizety = ^dynarraysizety;
 
 refinfoty = record
  count: refcountty;
 end;
 prefinfoty = ^refinfoty;
 refsizeinfoty = record
  ref: refinfoty;
  sizedummy: managedsizety;
 end;
 prefsizeinfoty = ^refsizeinfoty;
 pprefsizeinfoty = ^prefsizeinfoty;
 
 string8headerty = record
  ref: refinfoty;
  len: stringsizety;
 end; //following stringdata + terminating #0
 pstring8headerty = ^string8headerty;

 dynarrayheaderty = record
  ref: refinfoty;
  len: dynarraysizety;
 end; //following array datat
 pdynarrayheaderty = ^dynarrayheaderty;
 
const
 string8headersize = sizeof(string8headerty);
 string8allocsize = string8headersize+1; //terminating #0
 dynarrayheadersize = sizeof(dynarrayheaderty);
 dynarrayallocsize = dynarrayheadersize;

procedure __mla__decrefsize(ref: prefsizeinfoty);
procedure __mla__finirefsize(const ref: pprefsizeinfoty);

implementation

procedure __mla__decrefsize(ref: prefsizeinfoty);
begin
 if ref <> nil then begin
  dec(ref);
  if ref^.ref.count > 0 then begin
   dec(ref^.ref.count);
   if ref^.ref.count = 0 then begin
    freemem(ref);
   end;
  end;
 end;
end;

procedure __mla__finirefsize(const ref: pprefsizeinfoty);
var
 d: prefsizeinfoty;
begin
 d:= ref^;
 if d <> nil then begin
  dec(d);
  if d^.ref.count > 0 then begin
   dec(d^.ref.count);
   if d^.ref.count = 0 then begin
    freemem(d);
   end;
  end;
  ref^:= nil;
 end;
end;

end.
