//rtl_system
{ MSEpas Copyright (c) 2017 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}
unit rtl_system;
//system functions, preliminary ad-hoc implementation
//{$internaldebug on}
interface
uses
 rtl_base,rtl_libc,rtl_sysexceptions;

const
 invalidfilehandle = -1;
 
type
 filehandlety = int32;
 fileopenmodety = (fm_none,fm_read,fm_write,fm_readwrite,fm_create,fm_append);
 fileaccessmodety = (fa_denywrite,fa_denyread);
 fileaccessmodesty = set of fileaccessmodety;
 filerightty = (s_irusr,s_iwusr,s_ixusr,
                s_irgrp,s_iwgrp,s_ixgrp,
                s_iroth,s_iwoth,s_ixoth,
                s_isuid,s_isgid,s_isvtx);
 filerightsty = set of filerightty;
 filetypety = (ft_unknown,ft_dir,ft_blk,ft_chr,ft_reg,ft_lnk,ft_sock,ft_fifo);
 fileattributety = (fa_rusr,fa_wusr,fa_xusr,
                    fa_rgrp,fa_wgrp,fa_xgrp,
                    fa_roth,fa_woth,fa_xoth,
                    fa_suid,fa_sgid,fa_svtx,
                    fa_dir,
                    fa_archive,fa_compressed,fa_encrypted,fa_hidden,
                    fa_offline,fa_reparsepoint,fa_sparsefile,fa_system,
                    fa_temporary,
                    fa_all);
 fileattributesty = set of fileattributety;
 accessmodety = (am_read,am_write,am_execute,am_exist);
 accessmodesty = set of accessmodety;
 seekoriginty = (so_beginning, so_current, so_end); //must match unix numbers

 syserrorty = (sye_ok,sye_lasterror,sye_extendederror,sye_busy,sye_dirstream,
                sye_network,sye_write,sye_read,
                sye_thread,sye_mutex,sye_semaphore,sye_cond,sye_timeout,
                sye_copyfile,sye_createdir,sye_noconsole,sye_notimplemented,
                sye_sockaddr,sye_socket,sye_isdir
               );

 esys = class(eerror)
  constructor create(const aerror: syserrorty; const atext: string8);
  property error: syserrorty read geterror;
  property lasterror: int32 read flasterror;
  private
   flasterror: int32;
   method geterror(): syserrorty;
 end;

procedure syelasterror: syserrorty; //returns sye_lasterror, sets mselasterror
procedure buildsyserrormessage(const aerror: syserrorty;
                                        const amessage: string8): string8;

procedure nowutc(): datetimety;



procedure syserror(const aerror: syserrorty; const amessage: string8 = '');

threadvar
 mselasterror: int32;
 mselasterrormessage: string8;
 
implementation
//{$internaldebug on}
//uses                           //todo: error with llvm debuginfo:
// rtl_libc;                     //"Unable to find compile unit!"
                                 //must be in interface
uses
 rtl_sysintf;
const
 unidatetimeoffset = -25569;

procedure syelasterror: syserrorty; //returns sye_lasterror, sets mselasterror
begin
 result:= sye_lasterror;
 mselasterror:= sys_getlasterror();
end;

const
 errortexts: array[syserrorty] of string8 =
  ('','','', //sye_ok,sye_lasterror,sye_extendederror,
    'Busy',                     //sye_busy,
    'Dirstream',                //sye_dirstream,
    'Network error',            //sye_network,
    'Write error',              //sye_write,
    'Read error',               //sye_read,
    'Thread error',             //sye_thread,
    'Mutex error',              //sye_mutex,
    'Semaphore error',          //sye_semaphore,
    'Condition error',          //sye_cond,
    'Time out',                 //sye_timeout,
    'Copy file error',          //sye_copyfile,
    'Can not create directory', //sye_createdir,
    'No console',               //sye_noconsole,
    'Not implemented',          //sye_notimplemented,
    'Socket address error',     //sye_sockaddr,
    'Socket error',             //sye_socket,
    'File is directory.'        //sye_isdir
   );

procedure buildsyserrormessage(const aerror: syserrorty;
                                        const amessage: string8): string8;
begin
 result:= '';
 if aerror = sye_lasterror then
  result:= amessage + sys_geterrortext(mselasterror);
 else
  if aerror = sye_extendederror then
   result:= amessage + mselasterrormessage;
  else
   result:= amessage;
  end;
 end;
end;

procedure syserror(const aerror: syserrorty; const amessage: string8);
begin
 if aerror <> sye_ok then
  raise esys.create(aerror,buildsyserrormessage(aerror,amessage));
 end;
end;

procedure nowutc(): datetimety;
var
 ti: timeval;
 f1,f2: flo64;
begin
 gettimeofday(@ti,nil);
 result:= ti.tv_sec / (flo64(24.0)*60.0*60.0) + 
          ti.tv_usec / (flo64(24.0)*60.0*60.0*1e6) - unidatetimeoffset;
end;
(*
const
 openmodes: array[fileopenmodety] of longword =
//    fm_none,fm_read, fm_write,fm_readwrite,fm_create,
     (0,      o_rdonly,o_wronly,o_rdwr,      o_rdwr or o_creat or o_trunc,
//    fm_append
      o_rdwr or o_creat {or o_trunc});
*)

{ esys }

constructor esys.create(const aerror: syserrorty;  const atext: string8);
begin
 if aerror = sye_lasterror then
  flasterror:= mselasterror;
 end;
 inherited create(int32(aerror),atext,errortexts);
end;

method esys.geterror(): syserrorty;
begin
 result:= syserrorty(ferror);
end;

end.