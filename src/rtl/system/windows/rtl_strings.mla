{ MSEpas Copyright (c) 2017 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}

{$mode mselang}

unit rtl_strings;
interface
uses
 rtl_base;

const
 lineend = #$0d#$0a;

 c_linefeed = #$0a;
 c_return = #$0d;
 
  // to fix for windows

 upperchars: array[char8] of char8 = (
  #$00,#$01,#$02,#$03,#$04,#$05,#$06,#$07,#$08,#$09,#$0a,#$0b,#$0c,#$0d,#$0e,#$0f,
  #$10,#$11,#$12,#$13,#$14,#$15,#$16,#$17,#$18,#$19,#$1a,#$1b,#$1c,#$1d,#$1e,#$1f,
  #$20,#$21,#$22,#$23,#$24,#$25,#$26,#$27,#$28,#$29,#$2a,#$2b,#$2c,#$2d,#$2e,#$2f,
  #$30,#$31,#$32,#$33,#$34,#$35,#$36,#$37,#$38,#$39,#$3a,#$3b,#$3c,#$3d,#$3e,#$3f,
  #$40,#$41,#$42,#$43,#$44,#$45,#$46,#$47,#$48,#$49,#$4a,#$4b,#$4c,#$4d,#$4e,#$4f,
  #$50,#$51,#$52,#$53,#$54,#$55,#$56,#$57,#$58,#$59,#$5a,#$5b,#$5c,#$5d,#$5e,#$5f,
  #$60,'A' ,'B' ,'C' ,'D' ,'E' ,'F' ,'G' ,'H' ,'I' ,'J' ,'K' ,'L' ,'M' ,'N' ,'O' ,
  'P' ,'Q' ,'R' ,'S' ,'T' ,'U' ,'V' ,'W' ,'X' ,'Y' ,'Z' ,#$7b,#$7c,#$7d,#$7e,#$7f,
  #$80,#$80,#$82,#$83,#$84,#$85,#$86,#$87,#$88,#$89,#$8a,#$8b,#$8c,#$8c,#$8e,#$8e,
  #$80,#$91,#$92,#$93,#$94,#$95,#$96,#$97,#$98,#$99,#$9a,#$9b,#$9c,#$9c,#$9e,#$9f,
  #$00,#$01,#$02,#$03,#$04,#$05,#$06,#$07,#$08,#$09,#$0a,#$0b,#$0c,#$0d,#$0e,#$0f,
  #$10,#$11,#$12,#$13,#$14,#$15,#$16,#$17,#$18,#$19,#$1a,#$1b,#$1c,#$1d,#$1e,#$1f,
  #$20,#$21,#$22,#$23,#$24,#$25,#$26,#$27,#$28,#$29,#$2a,#$2b,#$2c,#$2d,#$2e,#$2f,
  #$30,#$31,#$32,#$33,#$34,#$35,#$36,#$37,#$38,#$39,#$3a,#$3b,#$3c,#$3d,#$3e,#$3f,
  #$40,#$41,#$42,#$43,#$44,#$45,#$46,#$47,#$48,#$49,#$4a,#$4b,#$4c,#$4d,#$4e,#$4f,
  #$50,#$51,#$52,#$53,#$54,#$55,#$56,#$57,#$58,#$59,#$5a,#$5b,#$5c,#$5d,#$5e,#$5f);

 lowerchars: array[char8] of char8 = (
  #$00,#$01,#$02,#$03,#$04,#$05,#$06,#$07,#$08,#$09,#$0a,#$0b,#$0c,#$0d,#$0e,#$0f,
  #$10,#$11,#$12,#$13,#$14,#$15,#$16,#$17,#$18,#$19,#$1a,#$1b,#$1c,#$1d,#$1e,#$1f,
  #$20,#$21,#$22,#$23,#$24,#$25,#$26,#$27,#$28,#$29,#$2a,#$2b,#$2c,#$2d,#$2e,#$2f,
  #$30,#$31,#$32,#$33,#$34,#$35,#$36,#$37,#$38,#$39,#$3a,#$3b,#$3c,#$3d,#$3e,#$3f,
  #$40,'a' ,'b' ,'c' ,'d' ,'e' ,'f' ,'g' ,'h' ,'i' ,'j' ,'k' ,'l' ,'m' ,'n' ,'o' ,
  'p' ,'q' ,'r' ,'s' ,'t' ,'u' ,'v' ,'w' ,'x' ,'y' ,'z' ,#$5b,#$5c,#$5d,#$5e,#$5f,
  #$80,#$80,#$82,#$83,#$84,#$85,#$86,#$87,#$88,#$89,#$8a,#$8b,#$8c,#$8c,#$8e,#$8e,
  #$80,#$91,#$92,#$93,#$94,#$95,#$96,#$97,#$98,#$99,#$9a,#$9b,#$9c,#$9c,#$9e,#$9f,
  #$00,#$01,#$02,#$03,#$04,#$05,#$06,#$07,#$08,#$09,#$0a,#$0b,#$0c,#$0d,#$0e,#$0f,
  #$10,#$11,#$12,#$13,#$14,#$15,#$16,#$17,#$18,#$19,#$1a,#$1b,#$1c,#$1d,#$1e,#$1f,
  #$20,#$21,#$22,#$23,#$24,#$25,#$26,#$27,#$28,#$29,#$2a,#$2b,#$2c,#$2d,#$2e,#$2f,
  #$30,#$31,#$32,#$33,#$34,#$35,#$36,#$37,#$38,#$39,#$3a,#$3b,#$3c,#$3d,#$3e,#$3f,
  #$40,#$41,#$42,#$43,#$44,#$45,#$46,#$47,#$48,#$49,#$4a,#$4b,#$4c,#$4d,#$4e,#$4f,
  #$50,#$51,#$52,#$53,#$54,#$55,#$56,#$57,#$58,#$59,#$5a,#$5b,#$5c,#$5d,#$5e,#$5f,
  #$50,#$51,#$52,#$53,#$54,#$55,#$56,#$57,#$58,#$59,#$5a,#$5b,#$5c,#$5d,#$5e,#$5f,
  #$50,#$51,#$52,#$53,#$54,#$55,#$56,#$57,#$58,#$59,#$5a,#$5b,#$5c,#$5d,#$5e,#$5f);
  {$endif} 
 
procedure strlen(const stringdata: pchar8): int32;
procedure setstring(out dest: string8; const source: pchar8; const len: int32);

procedure stringcomp(const a,b: string8): int32;
procedure stringicomp(const a,b: string8): int32;
         //ascii case insensitive

implementation

procedure strlen(const stringdata: pchar8): int32;
var
 p1: pchar8;
begin
 p1:= stringdata;
 while p1^ <> #0 do
  inc(p1);
 end;
 result:= p1 - stringdata;
end;

procedure setstring(out dest: string8; const source: pchar8; const len: int32);
begin
 setlength(dest,len);
 memcpy(pointer(dest),source,len);
end;

procedure stringcomp(const a,b: string8): int32;
var
 c1: card8;
 p1,p2,pe: pcard8;
 i1,i2: int32;
begin
 p1:= pointer(a);
 p2:= pointer(b);
 if p1 = nil then
  if p2 = nil then
   result:= 0;
   exit;
  end;
  result:= -1;
  exit;
 end;
 if p2 = nil then
  result:= 1;
  exit;
 end;
 i1:= length(a);
 i2:= length(b);
 if i2 < i1 then
  i1:= i2;
 end;
 pe:= p1+i1;
 while p1 < pe do
  c1:= p1^-p2^;
  if c1 <> 0 then
   break;
  end;
  inc(p1);
  inc(p2);
 end;
 result:= int8(c1);
end;

procedure stringicomp(const a,b: string8): int32;
         //ascii case insensitive
var
 c1: card8;
 p1,p2,pe: pchar8;
 i1,i2: int32;
begin
 p1:= pointer(a);
 p2:= pointer(b);
 if p1 = nil then
  if p2 = nil then
   result:= 0;
   exit;
  end;
  result:= -1;
  exit;
 end;
 if p2 = nil then
  result:= 1;
  exit;
 end;
 i1:= length(a);
 i2:= length(b);
 if i2 < i1 then
  i1:= i2;
 end;
 pe:= p1+i1;
 while p1 < pe do
  c1:= card8(ord(lowerchars[p1^]))-card8(ord(lowerchars[p2^]));
  if c1 <> 0 then
   break;
  end;
  inc(p1);
  inc(p2);
 end;
 result:= int8(c1);
end;

end.
