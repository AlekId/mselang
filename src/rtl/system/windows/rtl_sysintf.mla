//__mla__sysintf
{ MSElang Copyright (c) 2014-2018 by Martin Schreiber

    See the file COPYING.MSE, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
}
unit rtl_sysintf;

interface
uses
 rtl_system,__mla__internaltypes,__mla__system{,rtl_base};

procedure sys_bytestostring8(const source: bytestring): string8; 
procedure sys_string8tobytes(const source: string8): bytestring;

procedure sys_tosysfilepath(var path: filenamety): syserrorty;
procedure sys_fileopen(const path: filenamety;
           const openmode: fileopenmodety; const accessmode: fileaccessmodesty;
                  const rights: filerightsty; out fd: filehandlety): syserrorty;
procedure sys_fileclose(const fd: filehandlety): syserrorty;
procedure sys_filewrite(const fd: filehandlety; const buf: pointer; 
                                                 nbytes: int32): int32;
procedure sys_fileread(const fd: filehandlety; const buf: pointer; 
                                                 nbytes: int32): int32;
procedure sys_fileseek(const fd: filehandlety; const offset: int64;
                                         const origin: seekoriginty): int64;
procedure sys_stdin(): filehandlety;
procedure sys_stdout(): filehandlety;
procedure sys_stderr(): filehandlety;

procedure sys_getlasterror(): int32;
procedure sys_geterrortext(const aerror: int32): string8;

implementation
uses
 rtl_ctypes,rtl_libc,rtl_system,__mla__internaltypes,rtl_strings;

procedure sys_getlasterror(): int32;
begin
 result:= __error()^;
end;

procedure sys_geterrortext(const aerror: int32): string8;
const
 buflen = 1024;
var
 buffer: array[0..buflen] of char8;
 po1: pchar8;
begin
 result:= ''; //compilerwarning
 po1:= strerror_s(pcchar(@buffer),buflen, aerror);
 setstring(result,po1,strlen(po1));
end;

procedure sys_bytestostring8(const source: bytestring): string8; 
begin
 pointer(result):= pointer(source);
end;

procedure sys_string8tobytes(const source: string8): bytestring;
begin
 pointer(result):= pointer(source);
end;

procedure sys_tosysfilepath(var path: filenamety): syserrorty;
begin
 result:= sye_ok;
end;

procedure tosys(const avalue: filenamety): bytestring;
begin
 result:= avalue;
{ todo:
 if filenameutfoptions <> [] then begin
  result:= stringtoutf8(avalue,filenameutfoptions);
 end
 else begin
  result:= ansistring(avalue);
 end;
}
end;

procedure fromsys(const avalue: bytestring): filenamety;
begin
{ todo:
 if filenameutfoptions <> [] then begin
  result:= utf8tostringansi(avalue,filenameutfoptions);
 end
 else begin
  result:= filenamety(avalue);
 end;
}
end;
 
procedure getopenmodes(amode: fileopenmodety): card32; //todo: use array
begin
 result:= 0;
 case amode of 
  fm_read:
   result:= o_rdonly;
  fm_write:
   result:= o_wronly;
  fm_readwrite:
   result:= o_rdwr;
  fm_create:
   result:= o_rdwr or o_creat or o_trunc;
  fm_append:
   result:= o_rdwr or o_creat;
 end;
end;

procedure sys_fileopen(const path: filenamety;
          const openmode: fileopenmodety; const accessmode: fileaccessmodesty;
                  const rights: filerightsty; out fd: filehandlety): syserrorty;
var
 s1: string8;
 s2: filenamety;
// stat1: _stat;
const
 defaultopenflags = o_cloexec; 
begin
 s2:= path;
 sys_tosysfilepath(s2);
 s1:= tosys(s2);
// str1:= path;
 fd:= rtl_libc.open(pcchar(s1), getopenmodes(openmode) or defaultopenflags);
// handle:= open(pcchar(str1), openmodes[openmode] or 
//                            defaultopenflags,[getfilerights(rights)]);
 if fd >= 0 then
 {
  if fstat(handle,@stat1) = 0 then begin  
   if s_isdir(stat1.st_mode) then begin
    mselibc.__close(handle);
    handle:= -1;
    result:= sye_isdir;
   end
   else begin
    setcloexec(handle);
    result:= sye_ok;
   end;    
  end
  else begin
   mselibc.__close(handle);
   handle:= -1;
   result:= syelasterror;
  end;
 }
  result:= sye_ok;
 else
  result:= syelasterror();
 end;
end;

procedure sys_fileclose(const fd: filehandlety): syserrorty;
var
 i1: cint;
begin
 result:= sye_ok;
 if (fd <> invalidfilehandle) then
  if rtl_libc.close(fd) <> 0 then
   result:= sye_lasterror;
  end;
 end;
{
  repeat
   int1:= mselibc.__close(handle);
  until (int1 = 0) or (sys_getlasterror <> EINTR);
  if int1 <> 0 then begin
   result:= syelasterror;
  end;
 end;
}
end;

procedure sys_filewrite(const fd: filehandlety; const buf: pointer; 
                                                  nbytes: int32): int32;
var
 i1: int32;
begin
 result:= rtl_libc.write(fd,buf,nbytes);
{
 result:= nbytes;
 repeat
  i1:= mselibc.__write(fd,buf^,nbytes);
  if int1 = -1 then begin
   if sys_getlasterror <> eintr then begin
    result:= int1;
    break;
   end;
   continue;
  end;
  inc(pchar(buf),int1);
  dec(nbytes,int1);
 until integer(nbytes) <= 0;
}
end;

procedure sys_fileread(const fd: filehandlety; const buf: pointer; 
                                                 nbytes: int32): int32;
begin
 result:= rtl_libc.read(fd,buf,nbytes);
{
 repeat
  result:= mselibc.__read(fd,buf^,nbytes);
 until (result >= 0) or (sys_getlasterror <> eintr);
 if (result < 0) and (sys_getlasterror = EAGAIN) then begin
  result:= 0; //nonblock
 end;
}
end;

procedure sys_fileseek(const fd: filehandlety; const offset: int64;
                                         const origin: seekoriginty): int64;
begin
 result:= rtl_libc.lseek64(fd,offset,ord(origin));
end;

procedure sys_stdin(): filehandlety;
begin
 result:= 0;
end;

procedure sys_stdout(): filehandlety;
begin
 result:= 1;
end;

procedure sys_stderr(): filehandlety;
begin
 result:= 2;
end;

end.
